class Solution {
private:
    pair<int,int> BS(vector<int> &nums,int target){
        pair<int,int> ans = {-1,-1};
        int s = 0, e = nums.size() - 1;

        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ans = {nums[mid],nums[mid]};
                break;
            }
            else if(nums[mid] < target){
                ans.first = nums[mid];
                s = mid + 1;
            }
            else{
                ans.second = nums[mid];
                e = mid - 1;
            }
        }

        return ans;
    }
public:
    int findRadius(vector<int>& houses, vector<int>& heaters) {
        sort(begin(houses),end(houses));
        sort(begin(heaters),end(heaters));
        int n = size(houses), ans = 0;

        for(int i=0;i<n;i++){
            pair<int,int> p = BS(heaters,houses[i]);
            int ls = p.first == -1 ? INT_MAX : houses[i] - p.first;
            int rs = p.second == -1 ? INT_MAX : p.second - houses[i];
            ans = max(ans,min(ls,rs)); 
        }

        return ans;
    }
};
