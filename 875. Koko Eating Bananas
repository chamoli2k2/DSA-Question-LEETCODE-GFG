class Solution {
private:
    bool check(vector<int> &nums,int k,int target){
        int n = nums.size();
        long long time = 0;

        for(int i=0;i<n;i++){
            if(nums[i] <= k){
                time++;
            }
            else{
                if(nums[i] % k != 0){
                    time += 1LL*(nums[i] / k + 1);
                }
                else{
                    time += 1LL*(nums[i] / k);
                }
            }
        }

        return time <= target;
    }
public:
    int minEatingSpeed(vector<int>& piles, int h) {
        int n = piles.size();
        long long s = 1, e = *max_element(piles.begin(),piles.end()), mid, ans;

        while(s <= e){
            mid = s + (e - s) / 2;

            if(check(piles,mid,h)){
                ans = mid;
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }
};
