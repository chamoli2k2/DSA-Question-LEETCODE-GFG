class Solution {
private:
    void solve(unordered_map<int,list<int>> &mp,vector<int> &visited,int node){
        visited[node] = 1;
        
        for(auto it : mp[node]){
            if(visited[it] == 0){
                solve(mp,visited,it);
            }
        }
    }
public:
    int makeConnected(int n, vector<vector<int>>& nums) {
        // base case
        if(nums.size() < n-1) return -1;

        unordered_map<int,list<int>> mp;
        // making adjacency list
        for(auto& it : nums){
            mp[it[0]].push_back(it[1]);
            mp[it[1]].push_back(it[0]);
        }

        // making visited list
        int kComp = 0;
        vector<int> visited(n,0);
        for(int i=0;i<n;i++){
            if(visited[i] == 0){
                kComp++;
                solve(mp,visited,i);
            }
        }

        return kComp-1; 
    }
};
