class Solution
{
public:
    long long helper(long long int dp[101][101][101],int n,int k,vector<vector<int>>arr,int i,int j)
    {
        if(i>=n || j>=n) 
        {
            return 0;
        }
        if(i==n-1 && j==n-1)
        {
            return dp[i][j][k]=k==arr[i][j]?1:0;
        }
        if(dp[i][j][k]!=-1)
        {
            return dp[i][j][k];
        }
        if(dp[i+1][j][k-arr[i][j]]==-1)
        {
            dp[i+1][j][k-arr[i][j]]=helper(dp,n,k-arr[i][j],arr,i+1,j);
        }
        if(dp[i][j+1][k-arr[i][j]]==-1)
        {
            dp[i][j+1][k-arr[i][j]]=helper(dp,n,k-arr[i][j],arr,i,j+1);
        }
        return dp[i][j][k]=dp[i+1][j][k-arr[i][j]]+dp[i][j+1][k-arr[i][j]];
    }
    long long numberOfPath(int n, int k, vector<vector<int>> arr)
    {
        long long int dp[101][101][101];
        memset(dp,-1,sizeof(dp));
        return helper(dp,n,k,arr,0,0);
    }
};
