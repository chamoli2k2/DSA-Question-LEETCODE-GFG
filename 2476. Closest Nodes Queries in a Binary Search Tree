class Solution {
public:
    void solve(TreeNode* root,vector<int> &temp){
        // base case
        if(root == NULL) return;
        
        solve(root->left,temp);
        temp.push_back(root->val);
        solve(root->right,temp);
    }
    
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>> ans;
        int n = queries.size();
        vector<int> temp;
        solve(root,temp);
        
        for(int i=0;i<queries.size();i++){
            int num = queries[i];
            int k = lower_bound(temp.begin(),temp.end(),num) - temp.begin();
            vector<int> arr;
                
            if(k < temp.size() && temp[k] == num){
                arr.push_back(temp[k]);
            }
            else if(k-1 >= 0){
                arr.push_back(temp[k-1]);
            }
            else{
                arr.push_back(-1);
            }
            
            if(k < temp.size() && temp[k] == num){
                arr.push_back(temp[k]);
            }
            else if(k < temp.size()){
                arr.push_back(temp[k]);
            }
            else{
                arr.push_back(-1);
            }
            
            ans.push_back(arr);
            
        }
        
        return ans;
    }
};
