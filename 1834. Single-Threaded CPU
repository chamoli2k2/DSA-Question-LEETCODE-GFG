class Solution {
public:
    vector<int> getOrder(vector<vector<int>>& tasks) {
        // Pushing the idx in the task
        for(int i=0;i<tasks.size();i++){
            tasks[i].push_back(i);
        }

        // Sorting the task
        sort(tasks.begin(),tasks.end());

        // Making the priority queue
        priority_queue<pair<int,int>> pq;

        // making the variable for enqueue time
        long time = 0, idx = 0;
        vector<int> ans;

        while(ans.size() < tasks.size()){
            if(idx < tasks.size() && pq.empty()){
                time = max(time,(long)tasks[idx][0]);
            }

            while(idx < tasks.size() && time >= tasks[idx][0]){
                pq.push({-tasks[idx][1],-tasks[idx][2]});
                idx++;
            }

            auto x = pq.top();
            pq.pop();
            ans.push_back(-x.second);
            time += -x.first;
        }

        return ans;
    }
};
