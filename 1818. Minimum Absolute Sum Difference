class Solution {
public:
    int minAbsoluteSumDiff(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), mod = 1e9 + 7;
        vector<int> diff, bestDiff;

        // finding the difference array
        for(int i=0;i<n;i++){
            int k = abs(nums1[i] - nums2[i]);
            diff.push_back(k);
        }

        // finding the best difference possible for each indx
        sort(nums1.begin(),nums1.end());

        for(int i=0;i<n;i++){
            int idx = lower_bound(nums1.begin(),nums1.end(),nums2[i]) - nums1.begin();

            int g = (idx < n) ? (nums1[idx] - nums2[i]) : (INT_MAX);

            int s = (idx-1 >= 0) ? (nums2[i] - nums1[idx-1]) : (INT_MAX);

            int m = min(g,s);

            bestDiff.push_back(m);
        }

        int prevDiff = 0, best = 0, ans = 0;
        for(int i=0;i<n;i++){
            int s = diff[i] - bestDiff[i];
            if(best < s){
                // removing
                ans -= prevDiff - best;
                // adding the previous
                ans += prevDiff;
                // updating the best
                best = diff[i] - bestDiff[i];
                // updating the previousdiff
                prevDiff = diff[i];
                // adding new saving into answer
                ans += bestDiff[i];
            }
            else{
                ans = (ans % mod + diff[i] % mod) % mod;
            }
        }
        
        return ans;
    }
};
