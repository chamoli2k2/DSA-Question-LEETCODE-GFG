class Solution {
private:
    void dfs(unordered_map<int,list<int>> &mp,vector<bool> &visited,int node,int &k){
        visited[node] = true;
        k++;
        for(auto it : mp[node]){
            if(visited[it] == false)
                dfs(mp,visited,it,k);
        }
    }
public:
    int maximumDetonation(vector<vector<int>>& bombs) {
        int ans = 0, n = size(bombs);
        unordered_map<int,list<int>> mp;
        for(int i=0;i<n;i++){
            int x1 = bombs[i][0], y1 = bombs[i][1], r1 = bombs[i][2];
            for(int j=0;j<n;j++){
                if(i == j) continue;

                long long x2 = bombs[j][0], y2 = bombs[j][1];
                long long d = ((x2-x1) *1LL* (x2-x1)) + ((y2-y1) *1LL* (y2-y1));
                if(r1*1LL*r1 >= d){
                    mp[i].push_back(j);
                }
            }
        }

        for(int i=0;i<n;i++){
            vector<bool> visited(n,false);
            int k = 0;
            dfs(mp,visited,i,k);
            ans = max(ans,k);
        }

        return ans;
    }
};
