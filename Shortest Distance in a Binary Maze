class Solution {
  public:
    int shortestPath(vector<vector<int>> &grid, pair<int, int> source,
                     pair<int, int> destination) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> path(n,vector<int>(m,INT_MAX));
        int si = source.first, ei = source.second;
        int sf = destination.first, ef = destination.second;
        // base case
        if(si == sf && ei == ef) return 0;
        
        path[si][ei] = 0;
        queue<pair<int,pair<int,int>>> q;
        q.push({0,{si,ei}});
        
        
        // Making row and col
        int row[] = {0,0,-1,1};
        int col[] = {-1,1,0,0};
        
        while(!q.empty()){
            int dist = q.front().first;
            int s = q.front().second.first;
            int e = q.front().second.second;
            q.pop();
            
            for(int i=0;i<4;i++){
                int r = s + row[i];
                int c = e + col[i];
                
                if(r >= 0 && c >= 0 && r < n && c < m && grid[r][c] == 1 && dist+1 < path[r][c]){
                    path[r][c] = dist + 1;
                    if(r == sf && c == ef){
                        return path[r][c];
                    }
                    q.push({dist+1,{r,c}});
                }
            }
            
        }
        
        return -1;
    }
};
