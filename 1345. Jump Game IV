class Solution {
public:
    int minJumps(vector<int>& arr) {
        int n = arr.size();
        unordered_map<int,list<int>> mp;
        for(int i=0;i<n;i++){
            mp[arr[i]].push_back(i);
        }

        vector<int> visited(n,0);
        visited[0] = 1;
        queue<pair<int,int>> q;
        q.push({0,0});

        int ans = INT_MAX;
        
        while(!q.empty()){
            int node = q.front().first;
            int step = q.front().second;
            q.pop();

            if(node == n-1){
                ans = min(ans,step);
            }

            if(node-1 >= 0 && visited[node-1] == 0){
                q.push({node-1,step+1});
            }

            if(node+1 < n && visited[node+1] == 0){
                q.push({node+1,step+1});
            }

            for(auto it : mp[arr[node]]){
                if(visited[it] == 0){
                    q.push({it,step+1});
                }
            }
            
            mp[arr[node]].clear();

            visited[node] = 1;
        }

        return ans;
    }
};
