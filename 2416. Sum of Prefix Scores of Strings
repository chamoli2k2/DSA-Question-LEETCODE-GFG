class Node{
public:
    Node* links[26];
    int CntPrefix = 0;

    // Checking if current node has the the alphabet
    bool containKey(char ch){
        // The character exist if this condition satisfy
        return links[ch-'a'] != NULL;
    }

    // Inserting the reference of character into the node
    void put(char ch,Node* node){
        links[ch-'a'] = node;
    }

    // moving to new refernce trie
    Node* get(char ch){
        return links[ch-'a'];
    }

    // Increasing the count
    void incrementCnt(){
        CntPrefix++;
    }

    // Getting the prefix count
    int getCnt(){
        return CntPrefix;
    }
};

class Trie {
private:
    Node* root;
public:
    Trie() {
        root = new Node();
    }
    
    void insert(string &word) {
        Node* node = root;
        for(int i=0;i<word.size();i++){
            // Checking if word exist or not
            if(node->containKey(word[i]) == false){
                node->put(word[i],new Node());
            }
            node = node->get(word[i]);
            // Incrementing the Prefix Count
            node->incrementCnt();
        }
    }
    
    int CountPrefix(string &word) {
        Node* node = root;
        int ans = 0;
        for(int i=0;i<word.size();i++){
            node = node->get(word[i]);
            ans += node->getCnt();
        }
        return ans;
    }
};

class Solution {
public:
    vector<int> sumPrefixScores(vector<string>& words) {
        Trie tr;
        for(auto &it : words){
            tr.insert(it);
        }

        vector<int> ans;
        for(auto &it : words){
            ans.push_back(tr.CountPrefix(it));
        }

        return ans;
    }
};
