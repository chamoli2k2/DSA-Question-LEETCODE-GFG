class Solution {
private:
    int solve(vector<vector<int>> &grid,vector<vector<int>> &dp,int i,int j,int n,int m){
        // Base case
        if(i < 0 || j < 0 || i >= n || j >= m) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        // c1
        int c1 = 0;
        if(i-1 >= 0 && j+1 < m && grid[i-1][j+1] > grid[i][j]){
            c1 = 1 + solve(grid,dp,i-1,j+1,n,m);
        }
        
        int c2 = 0;
        if(j+1 < m && grid[i][j] < grid[i][j+1]){
            c2 = 1 + solve(grid,dp,i,j+1,n,m);
        }
        
        int c3 = 0;
        if(i+1 < n && j+1 < m && grid[i][j] < grid[i+1][j+1]){
            c3 = 1 + solve(grid,dp,i+1,j+1,n,m);
        }
        
        return dp[i][j] = max({c1,c2,c3});
    }
public:
    
    int maxMoves(vector<vector<int>>& grid) {
        int n = size(grid), m = size(grid[0]), ans = 0;
        vector<vector<int>> dp(n,vector<int>(m,-1));
        for(int i=0;i<n;i++){
            ans = max(ans,solve(grid,dp,i,0,n,m));
        }
        
        return ans;
    }
};
