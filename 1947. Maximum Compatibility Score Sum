class Solution {
private:
    int solve(vector<vector<int>> &nums,vector<int> &dp,int mMask,int idx,int m){
        // Base case
        if(mMask+1 == (1<<m)){
            return 0;
        }

        if(dp[mMask] != -1) return dp[mMask];

        int ans = 0;
        for(int j=0;j<m;j++){
            if((mMask&(1<<j)) == 0){
                int k = nums[idx][j] + solve(nums,dp,mMask|(1 << j),idx+1,m);
                ans = max(k,ans);
            }
        }

        return dp[mMask] = ans;
    }
public:
    int maxCompatibilitySum(vector<vector<int>>& students, vector<vector<int>>& mentors) {
        int n = students.size(), m = students[0].size();
        vector<vector<int>> nums(n,vector<int>(n,0));

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                int count = 0;
                for(int k=0;k<m;k++){
                    if(students[i][k] == mentors[j][k]){
                        count++;
                    }
                }
                nums[i][j] = count;
            }
        }

        vector<int> dp(2*(1<<n),-1);
        return solve(nums,dp,0,0,n);
    }
};
