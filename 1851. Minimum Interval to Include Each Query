class Solution {
public:
    vector<int> minInterval(vector<vector<int>>& intervals, vector<int>& queries) {
        int n = size(queries);
        priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>> pq;
        vector<int> ans(n,-1);
        vector<pair<int,int>> q(n);
        for(int i=0;i<n;i++){
            q[i] = {queries[i],i};
        }


        // Sorting the intervals and queries
        sort(begin(q),end(q));
        sort(begin(intervals),end(intervals));

        int j = 0;
        for(int i=0;i<n;i++){
            int idx = q[i].second, qr = q[i].first;
            while(j < intervals.size() && intervals[j][0] <= qr){
                int size = intervals[j][1] - intervals[j][0] + 1;
                pq.push({size,intervals[j][1]});
                j++;
            }

            while(!pq.empty() && pq.top().second < qr){
                pq.pop();
            }

            // checking if pq still have element
            if(!pq.empty()){
                ans[idx] = pq.top().first;
            }
        }

        return ans;
    }
};
