class Solution {
public:
    string smallestSubsequence(string s) {
        int mp[26] = {0}, n = size(s), visited[26] = {0};
        // Storing the last position of each word
        for(int i=0;i<n;i++){
            mp[s[i]-'a'] = i+1;
        }

        stack<char> st;
        for(int i=0;i<n;i++){
            while(!st.empty() && st.top() >= s[i] && mp[st.top()-'a']-1 > i && visited[s[i]-'a'] == 0){
                visited[st.top()-'a'] = 0;
                st.pop();
            }

            if(visited[s[i]-'a'] == 0){
                visited[s[i]-'a'] = 1;
                st.push(s[i]);
            }
        }

        string ans = "";
        while(!st.empty()){
            ans += st.top();
            st.pop();
        }
        reverse(ans.begin(),ans.end());

        return ans;
    }
};
