class Solution {
  public:
    //Function to find two repeated elements.
    vector<int> twoRepeated (int arr[], int n) {
        long long sum = 0, sumOfSquares = 0;
    
        // Calculate sum and sum of squares of all elements in the array
        for (int i = 0; i < n + 2; i++) {
            sum += arr[i];
            sumOfSquares += (long long)arr[i] * arr[i];
        }
    
        // Calculate the sum and sum of squares of all numbers from 1 to n
        long long expectedSum = (n *1LL* (n + 1)) / 2;
        long long expectedSumOfSquares = (n *1LL* (n + 1) *1LL* (2 *1LL* n + 1)) / 6;
    
        // Calculate the difference between actual and expected sums
        long long diffSum = sum - expectedSum;
        long long diffSumOfSquares = sumOfSquares - expectedSumOfSquares;
        
        
        // x2 - Qx - k = 0
        // Q = diffSum     k = diffSumofSquares - diffSum*diffSum / 2
        
        // Roots will be
        // root = Q +- sqrt(Q2 + 4k) / 2
        
        long long Q = diffSum, k = (diffSumOfSquares - diffSum*diffSum) / 2;
        
        long long root1 = (Q + sqrt((Q*Q + 4*k))) / 2;
        long long root2 = (Q - sqrt((Q*Q + 4*k))) / 2;
        
        int k1 = 0, k2 = 0;
        for(int i=0; i<n+2; i++){
            if(root1 == 1LL*arr[i]){
                k1++;
            }
            else if(root2 == 1LL*arr[i]){
                k2++;
            }
            
            if(k1 == 2 || k2 == 2) break;
        }
        
        if(k1 == 2) return {root1, root2};
        
        return {root2, root1};
    }
};