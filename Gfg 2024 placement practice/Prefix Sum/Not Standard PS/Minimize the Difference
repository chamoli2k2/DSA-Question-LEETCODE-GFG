
class Solution {
  public:
    int minimizeDifference(int n, int k, vector<int> &arr) {
        vector<int> lsMin(n), lsMax(n), rsMin(n), rsMax(n);
        lsMin[0] = arr[0], rsMin[n-1] = arr[n-1];
        rsMax[n-1] = arr[n-1], lsMax[0] = arr[0];
        
        // finding left maximum right maximum
        for(int i=1; i<n; i++){
            lsMin[i] = min(lsMin[i-1], arr[i]);
            rsMin[n-i-1] = min(rsMin[n-i], arr[n-i-1]);
            lsMax[i] = max(lsMax[i-1], arr[i]);
            rsMax[n-i-1] = max(rsMax[n-i], arr[n-i-1]);
        }
       
        int ans = INT_MAX;
        
        for(int i=0; i<=n-k; i++){
            int maxi = INT_MIN, mini = INT_MAX;
            if(i-1 >= 0){
                maxi = max(lsMax[i-1], maxi);
                mini = min(lsMin[i-1], mini);
            }
            
            if(i+k < n){
                maxi = max(rsMax[i+k], maxi);
                mini = min(rsMin[i+k], mini);
            }
    
            ans = min(ans, abs(maxi-mini));
        }
        
        
        return ans;
    }
};