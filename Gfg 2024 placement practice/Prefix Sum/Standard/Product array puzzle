class Solution {
  public:
    // nums: given vector
    // return the Product vector P that hold product except self at each index
    vector<long long int> productExceptSelf(vector<long long int>& nums) {

        vector<long long int> ans;
        int n = nums.size();
        if(n == 1) return {1};
        vector<long long int> suffix(n);
        suffix[n-1] = nums[n-1];
        for(int i=n-2; i>=0; i--){
            suffix[i] = suffix[i+1] * nums[i];
        }
        
        if(n > 1){
            ans.push_back(suffix[1]);
        }
        
        long long prefix = nums[0];
        
        for(int i=1; i<n; i++){
            if(i+1 < n){
                ans.push_back(prefix * suffix[i+1]);
            }
            else{
                ans.push_back(prefix);
            }
            
            prefix = prefix * nums[i];
        }
        
        return ans;
    }
};
