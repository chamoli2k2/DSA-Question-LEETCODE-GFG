class Solution {
    private:
    int solve(vector<int> &arr, vector<vector<int>> &dp, int idx, int target, int n){
        // Base case
        if(idx == n){
            return target == 0;
        }
        
        if(dp[idx][target] != -1) return dp[idx][target];
        
        int take = 0;
        if(arr[idx] <= target){
            take = solve(arr, dp, idx+1, target-arr[idx], n);
        }
        
        int notTake = solve(arr, dp, idx+1, target, n);
        
        return dp[idx][target] = (take%mod + notTake%mod) % mod;
    }
  public:
    int mod = 1e9 + 7;
    int countPartitions(int n, int d, vector<int>& arr) {
        int totalSum = accumulate(arr.begin(), arr.end(), 0);
        if((totalSum+d)&1) return 0;
        int target = (totalSum + d) / 2;
        vector<vector<int>> dp(n+1, vector<int> (target+1 , -1));
        return solve(arr, dp, 0, target, n);
    }
};
