class Solution {
    private:
    long long solve(int i, int j, int len, int n){
        // Base case
        if(len == n) return 1;
        
        if(dp[i][j][len] != -1) return dp[i][j][len];
        
        // We have following option
        long long count = 0;
        if(i+1 < 4 && nums[i+1][j] != '*' && nums[i+1][j] != '#'){
            count += solve(i+1, j, len+1, n);
        }
        
        if(i-1 >= 0){
            count += solve(i-1, j, len+1, n);
        }
        
        if(j+1 < 3 && nums[i][j+1] != '#'){
            count += solve(i, j+1, len+1, n);
        }
        
        if(j-1 >= 0 && nums[i][j-1] != '*'){
            count += solve(i, j-1, len+1, n);
        }
        
        count += solve(i, j, len+1, n);
        
        return dp[i][j][len] = count;
    }
  public:
    long long dp[5][5][30];
    vector<vector<char>> nums = {{'1', '2', '3'}, {'4', '5', '6'}, {'7', '8', '9'}, {'*', '0', '#'}};
    long long getCount(int n) {
        long long ans = 0;
        memset(dp, -1, sizeof(dp));
        for(int i=0; i<4; i++){
            for(int j=0; j<3; j++){
                if(nums[i][j] >= '0' && nums[i][j] <= '9'){
                    ans += solve(i, j, 1, n);
                }
            }
        }
        
        return ans;
    }
};
