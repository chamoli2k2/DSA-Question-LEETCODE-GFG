class Solution {
    private:
    int solve(vector<vector<int>> &grid, int i, int j1, int j2){
        // Base case
        int n = grid.size(), m = grid[0].size();
        if(j1 < 0 || j2 < 0 || j1 == m || j2 == m) return -1e7;
        if(i == n-1){
            if(j1 == j2) return grid[i][j1];
            return grid[i][j1] + grid[i][j2];
        }
        
        
        if(dp[i][j1][j2] != -1) return dp[i][j1][j2];
        
        
        int ans = -1e7;
        int curr = 0;
        if(j1 == j2){
            curr += grid[i][j1];
        }
        else{
            curr += grid[i][j1] + grid[i][j2];
        }
        
        
        for(int k1=-1; k1<=1; k1++){
            for(int k2=-1; k2<=1; k2++){
                int dj1 = j1 + k1;
                int dj2 = j2 + k2;
                ans = max(ans, solve(grid, i+1, dj1, dj2));
            }
        }
        
        return dp[i][j1][j2] = curr + ans;
    }
  public:
    int dp[71][71][71];
    int solve(int n, int m, vector<vector<int>>& grid) {
        for(int i=0; i<71; i++){
            for(int j=0; j<71; j++){
                for(int k=0; k<71; k++){
                    dp[i][j][k] = -1;
                }
            }
        }
        return solve(grid, 0, 0, m-1);
    }
};
