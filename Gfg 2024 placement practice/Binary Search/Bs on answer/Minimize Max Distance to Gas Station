class Solution {
    private:
    int countStations(vector<int> &nums, double diff){
        int n = nums.size(), count = 0;
        
        for(int i=0; i<n-1; i++){
            double currDiff = 1.0*(nums[i+1] - nums[i]);
            int numStations = currDiff / diff;
            
            if((numStations*diff) == currDiff){
                numStations--;
            }
            
            count += numStations;
        }
        
        return count;
    }
  public:
    double findSmallestMaxDist(vector<int> &stations, int k) {
        int n = stations.size();
        double s = 0, e = 0;
        for(int i=0; i<n-1; i++){
            double diff = 1.0*(stations[i+1] - stations[i]);
            e = max(e, diff);
        }
        
        double diff = 1e-6, ans;
        
        while((e-s) > diff){
            double mid = s + (e - s) / 2;
            
            int count = countStations(stations, mid);
            
            if(count > k){
                s = mid;
            }
            else{
                ans = mid;
                e = mid;
            }
        }
        
        return ans;
        
    }
};
