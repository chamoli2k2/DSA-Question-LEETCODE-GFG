class Solution{
private:
    int findL(int nums[], int n, int target){
        int s = 0, e = n-1, ans = -1;

        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ans = mid;
                e = mid - 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }

    int findU(int nums[], int n, int target){
        int s = 0, e = n-1, ans = -1;

        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ans = mid;
                s = mid + 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }
public:	
	/* if x is present in arr[] then returns the count
		of occurrences of x, otherwise returns 0. */
	int count(int arr[], int n, int x) {
	    int fs = findL(arr, n, x);
	    int ls = findU(arr, n, x);
	    
	    if(fs == -1 || ls == -1) return 0;
	    
	    return ls-fs+1;
	}
};