class DisJointSet {
private:
    vector<int> rank, parent;
public:
    // Constructor
    DisJointSet(int n) {
        rank.resize(n + 1, 0); // Initialize rank to 0
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    // Finding ultimate parent of node
    int findUPar(int node) {
        // Finding Parent
        if (node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by rank 
    void unionByRank(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if (ulp_u == ulp_v) return;
        if (rank[ulp_u] < rank[ulp_v]) {
            parent[ulp_u] = ulp_v;
        }
        else if (rank[ulp_u] > rank[ulp_v]) {
            parent[ulp_v] = ulp_u;
        }
        else {
            parent[ulp_v] = ulp_u;
            rank[ulp_u]++;
        }
    }
};

class Solution {
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        vector<vector<int>> visited(n, vector<int>(m, 0));
        DisJointSet ds(n*m);
        vector<int> ans;
        int dr[] = {1, -1, 0, 0};
        int dc[] = {0, 0, 1, -1};
        int count = 0;
        
        for(auto &it : operators){
            int x = it[0], y = it[1];
            
            if(visited[x][y] == 1){
                ans.push_back(count);
                continue;
            }
            
            visited[x][y] = 1;
            count++;
            
            for(int k=0; k<4; k++){
                int row = x + dr[k];
                int col = y + dc[k];
                
                if(row >= 0 && row < n && col >= 0 && col < m && visited[row][col] == 1){
                    // Finding node and adjNode
                    int node = x*m + y;
                    int adjNode = row*m + col;
                    
                    if(ds.findUPar(node) != ds.findUPar(adjNode)){
                        count--;
                        ds.unionByRank(node, adjNode);
                    }
                }
            }
            
            ans.push_back(count);
        }
        
        return ans;
    }
};