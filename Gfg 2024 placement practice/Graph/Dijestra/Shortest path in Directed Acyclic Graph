class Solution {
  public:
     vector<int> shortestPath(int N,int M, vector<vector<int>>& edges){
        vector<int> ans(N, 1e8);
        vector<pair<int,int>> adjList[N];
        
        for(int i=0; i<M; i++){
            adjList[edges[i][0]].push_back({edges[i][1], edges[i][2]});
        }
        
        
        queue<pair<int,int>> q;
        q.push({0, 0});
        ans[0] = 0;
        
        while(!q.empty()){
            int dist = -1*q.front().first;
            int node = q.front().second;
            q.pop();
            
            for(auto &it : adjList[node]){
                int adjNode = it.first, newDist = it.second;
                if(ans[adjNode] > dist+newDist){
                    ans[adjNode] = dist+newDist;
                    q.push({-1*(dist+newDist), adjNode});
                }
            }
        }
        
        for(int i=0; i<N; i++) ans[i] = ans[i] == 1e8 ? -1 : ans[i];
        
        return ans;
    }
};