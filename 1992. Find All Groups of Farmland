class Solution {
private:
    void dfs(vector<vector<int>> &land,vector<vector<int>> &visited,int i,int j,int n,int m,vector<int> &p){
        // Base case
        if(i < 0 || j < 0 || j >= m || i >= n || land[i][j] == 0 || visited[i][j] == 1){
            return;
        }

        visited[i][j] = 1;
        
        // If we found the end
        if(((i+1 < n && land[i+1][j] == 0) || i+1 == n) && (j+1 == m || (j+1<m && land[i][j+1] == 0))){
            p.push_back(i);
            p.push_back(j);
            return;
        }

        // moving
        dfs(land,visited,i+1,j,n,m,p);
        dfs(land,visited,i-1,j,n,m,p);
        dfs(land,visited,i,j+1,n,m,p);
        dfs(land,visited,i,j-1,n,m,p);
    }
public:
    vector<vector<int>> findFarmland(vector<vector<int>>& land) {
        int n = land.size(), m = land[0].size();
        vector<vector<int>> ans, visited(n,vector<int>(m,0));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(land[i][j] == 1 && visited[i][j] == 0){
                    vector<int> k = {i,j};
                    dfs(land,visited,i,j,n,m,k);
                    ans.push_back(k);
                }
            }
        }

        return ans;
    }
};
