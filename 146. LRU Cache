class LRUCache {
private:
    class Node{
        public:
            int key;
            int val;
            Node* prev;
            Node* next;

            Node(int key,int val){
                this->key = key;
                this->val = val;
            }
    };
public:
    Node* head = new Node(-1,-1);
    Node* tail = new Node(-1,-1);

    int cap;
    unordered_map<int,Node*> mp;
    LRUCache(int capacity) {
        cap = capacity;
        head->next = tail;
        tail->next = head;
    }

    void addNode(Node* newNode){
        Node* temp = head->next;

        newNode->next = temp;
        newNode->prev = head;

        head->next = newNode;
        temp->prev = newNode;
    }

    void deleteNode(Node* delNode){
        Node* prevv = delNode->prev;
        Node* nextt = delNode->next;

        prevv->next = nextt;
        nextt->prev = prevv;
    }
    
    int get(int key) {
        if(mp.count(key)){
            Node* resNode = mp[key];
            int ans = resNode->val;

            mp.erase(key);
            deleteNode(resNode);
            addNode(resNode);

            mp[key] = head->next;
            return ans;
        }

        return -1;
    }
    
    void put(int key, int val) {
        if(mp.count(key)){
            Node* curr = mp[key];
            mp.erase(key);
            deleteNode(curr);
        }

        if(mp.size() == cap){
            mp.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new Node(key,val));
        mp[key] = head->next;
    }
};
