class Solution {
  private:
  void dfs(unordered_map<int,list<int>> &adjList,unordered_map<int,bool> &visited,int node){
      // marking visited
      visited[node] = true;
      
      for(auto i : adjList[node]){
          if(!visited[i]){
              dfs(adjList,visited,i);
          }
      }
  }
  public:
    int numProvinces(vector<vector<int>> adj, int V) {
        int count = 0;
        unordered_map<int,list<int>> adjList;
        
        for(int i=0;i<V;i++){
            int x = i + 1;
            for(int j=0;j<V;j++){
                int y = j + 1;
                if(adj[i][j] && i != j){
                    adjList[x].push_back(y);
                    adjList[y].push_back(x);
                }
            }
        }
        
        unordered_map<int,bool> visited;
        
        for(int i=1;i<=V;i++){
            if(!visited[i]){
                count++;
                dfs(adjList,visited,i);
            }
        }
        
        return count;
    }
};
