// Approach 1 :

class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        // Base case
        if(head == NULL) return NULL;
        if(head->next == NULL) return head;


        ListNode* reversedList = reverseList(head->next);
        ListNode* tempNode = reversedList;

        while(tempNode && tempNode->next){
            tempNode = tempNode->next;
        }

        tempNode->next = head;
        head->next = NULL;

        return reversedList;
    }
};


// Approach 2 :

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseList(ListNode* head) {
        ListNode* curr = head, *prev = NULL, *next;

        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
};