class Solution {
private:
    int findL(vector<int> &nums, int target){
        int n = nums.size(), s = 0, e = n-1, ans = -1;

        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ans = mid;
                e = mid - 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }

    int findU(vector<int> &nums, int target){
        int n = nums.size(), s = 0, e = n-1, ans = -1;

        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ans = mid;
                s = mid + 1;
            }
            else if(nums[mid] > target){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size(), s = 0, e = n-1;
        
        int st = findL(nums, target);
        int ed = findU(nums, target);

        return {st, ed};
    }
};