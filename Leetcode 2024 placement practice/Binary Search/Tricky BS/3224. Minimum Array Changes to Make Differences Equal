class Solution {
public:
    int minChanges(vector<int>& nums, int k) {
        int n = nums.size(), m = n/2;
        unordered_map<int,int> mp;
        vector<int> limit;

        for(int i=0; i<m; i++){
            int diff = abs(nums[n-i-1]-nums[i]);
            mp[diff]++;
            
            // Finding the maximum limit we can achieve using 1 operation only
            int maxi = max(nums[i], nums[n-i-1]), mini = min(nums[i], nums[n-i-1]);
            int limitDiff = max(maxi, k-mini);

            limit.push_back(limitDiff);
        }


        // Sorting the limit array
        sort(limit.begin(), limit.end());

        int ans = INT_MAX;

        // Trying for every difference
        for(auto &[diff, fq] : mp){
            int zeroOperation = fq;
            int oneOperation = m - fq;
            int twoOperation = lower_bound(limit.begin(), limit.end(), diff) - limit.begin();

            int tempAns = oneOperation + twoOperation;
            ans = min(ans, tempAns);
        }

        return ans;
    }
};