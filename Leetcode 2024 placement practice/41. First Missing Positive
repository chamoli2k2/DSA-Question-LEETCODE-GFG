// Approach 1 : 
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();

        for(int i=0; i<n; i++){
            if(nums[i] <= 0 || nums[i] > n) nums[i] = n+1;
        }

        for(int i=0; i<n; i++){
            int idx = abs(nums[i]);
            if(idx-1 >= 0 && idx-1 < n){
                if(nums[idx-1] > 0) nums[idx-1] = -nums[idx-1];
            }
        }

        for(int i=0; i<n; i++){
            if(nums[i] > 0) return i+1;
        }

        return n+1;
    }
};

// Approach 2 :
class Solution {
public:
    int firstMissingPositive(vector<int>& nums) {
        int n = nums.size();

        for(int i=0; i<n; i++){
            if(nums[i] <= 0 || nums[i] > n) continue;
            int element = nums[i], actualPosition = nums[i] - 1;

            while(actualPosition >= 0 && actualPosition < n && nums[actualPosition] != element){
                swap(nums[actualPosition],nums[i]);
                element = nums[i];
                actualPosition = nums[i] - 1;
            }
        }

        for(int i=0; i<n; i++){
            if(nums[i] != i+1) return i+1;
        }

        return n+1;
    }
};
