class Solution {
private:
    void merge(vector<int> &nums, int s, int mid, int e){
        vector<int> arr(e-s+1);
        int i = s, j = mid+1, k = 0;

        while(i <= mid && j <= e){
            if(nums[i] <= nums[j]){
                arr[k++] = nums[i++];
            }
            else{
                arr[k++] = nums[j++];
            }
        }

        while(i <= mid) arr[k++] = nums[i++];
        while(j <= e) arr[k++] = nums[j++];


        k = 0;
        for(int idx=s; idx<=e; idx++){
            nums[idx] = arr[k++];
        }
    }
    void mergeSort(vector<int> &nums, int i, int j){
        // Base case
        if(i >= j) return;

        int mid = i + (j - i) / 2;

        mergeSort(nums, i, mid);
        mergeSort(nums, mid+1, j);
        merge(nums, i, mid,  j);
    }
public:
    vector<int> sortArray(vector<int>& nums) {
        int n = nums.size();
        mergeSort(nums, 0, n-1);
        return nums;
    }
};