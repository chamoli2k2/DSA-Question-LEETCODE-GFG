class Solution {
private:
    int findLen(ListNode* head){
        // Base case
        if(head == NULL) return 0;
        return 1 + findLen(head->next);
    }

    ListNode* reverseList(ListNode* head){
        ListNode *curr = head, *prev = NULL, *next;

        while(curr){
            next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }

        return prev;
    }
public:
    bool isPalindrome(ListNode* head) {
        int n = findLen(head);
        ListNode* mid = head;
        int idx = 0;
        while(idx < n/2){
            mid = mid->next;
            idx++;
        }

        ListNode *newNode;
        if(n & 1){
            newNode = reverseList(mid->next);
        }
        else{
            newNode = reverseList(mid);
        }

        while(head && newNode){
            if(head->val != newNode->val) return false;
            head = head->next;
            newNode = newNode->next;
        }

        return true;
    }
};