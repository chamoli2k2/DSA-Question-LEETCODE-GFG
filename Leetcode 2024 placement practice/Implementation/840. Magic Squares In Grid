class Solution {
public:
    int numMagicSquaresInside(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), ans = 0;
        if(n < 3 || m < 3) return ans;

        auto isMagicSquare = [&](int x, int y) -> bool {
            vector<int> nums(10, 0);
            for(int i = 0; i < 3; i++) {
                for(int j = 0; j < 3; j++) {
                    int val = grid[x+i][y+j];
                    if(val < 1 || val > 9 || nums[val]++) return false;
                }
            }
            
            int sum = grid[x][y] + grid[x][y+1] + grid[x][y+2];
            
            for(int i = 0; i < 3; i++) {
                if(grid[x+i][y] + grid[x+i][y+1] + grid[x+i][y+2] != sum) return false;
                if(grid[x][y+i] + grid[x+1][y+i] + grid[x+2][y+i] != sum) return false;
            }
            
            if(grid[x][y] + grid[x+1][y+1] + grid[x+2][y+2] != sum) return false;
            if(grid[x][y+2] + grid[x+1][y+1] + grid[x+2][y] != sum) return false;
            
            return true;
        };

        for(int i = 0; i <= n - 3; i++) {
            for(int j = 0; j <= m - 3; j++) {
                if(isMagicSquare(i, j)) ans++;
            }
        }

        return ans;
    }
};
