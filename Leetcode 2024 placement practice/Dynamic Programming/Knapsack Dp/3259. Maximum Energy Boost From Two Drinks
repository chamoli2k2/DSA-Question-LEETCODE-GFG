class Solution {
private:
    long long solve(vector<int> &nums1, vector<int> &nums2, vector<vector<long long>> &dp, int idx, int flag){
        // Base case
        int n = nums1.size();
        if(idx == n) return 0;

        if(dp[idx][flag] != -1) return dp[idx][flag];

        long long currEnergy = (flag == 0) ? 1LL*nums1[idx] : 1LL*nums2[idx];

        long long take = currEnergy + solve(nums1, nums2, dp, idx+1, flag);
        long long notTake = solve(nums1, nums2, dp, idx+1, !flag);

        return dp[idx][flag] = max(take, notTake);
    }
public:
    long long maxEnergyBoost(vector<int>& energyDrinkA, vector<int>& energyDrinkB) {
        int n = energyDrinkA.size();
        vector<vector<long long>> dp1(n, vector<long long> (2, -1)), dp2(n, vector<long long> (2, -1));
        long long a = solve(energyDrinkA, energyDrinkB, dp1, 0, 0);
        long long b = solve(energyDrinkA, energyDrinkB, dp2, 0, 1);

        return max(a, b);
    }
};

class Solution {
public:
    long long maxEnergyBoost(vector<int>& ea, vector<int>& eb) {
        int n = ea.size();
        vector<long long> dp1(n), dp2(n);
        dp1[0] = ea[0], dp2[0] = eb[0];

        for(int i=1; i<n; i++){
            dp1[i] = max(dp2[i-1], dp1[i-1]+1LL*ea[i]);
            dp2[i] = max(dp1[i-1], dp2[i-1]+1LL*eb[i]);
        }

        return max(dp1[n-1], dp2[n-1]);
    }
};