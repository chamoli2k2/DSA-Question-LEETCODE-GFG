class Solution {
private:
    int kandaneAlgo(vector<int> nums){
        int n = nums.size(), ans = INT_MIN, sum = 0;

        for(int i=0; i<n; i++){
            sum += nums[i];
            
            ans = max(sum, ans);
            if(sum < 0){
                sum = 0;
            }
        }

        return ans;
    }
public:
    int maxSubarraySumCircular(vector<int>& nums) {
        int maxSumNonCircular = kandaneAlgo(nums);
        int totalSum = accumulate(nums.begin(), nums.end(), 0);
        for(auto &it : nums) it = -it;
        int negativeSum = kandaneAlgo(nums);
        int circularSum = totalSum + negativeSum;

        if(circularSum == 0) return maxSumNonCircular;
        return max(circularSum, maxSumNonCircular);
    }
};