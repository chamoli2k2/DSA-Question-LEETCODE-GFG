class Solution {
private:
    int upperBound(vector<vector<int>> &nums, int idx){
        int s = idx+1, e = (nums.size()-1), mid, target = nums[idx][1], ans = nums.size();

        while(s <= e){
            mid = s + (e - s) / 2;
            if(nums[mid][0] > target){
                ans = mid;
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }

    int solve(vector<vector<int>> &nums, int idx, int n){
        // Base case
        if(idx >= n) return 0;

        if(dp[idx] != -1) return dp[idx];


        // Take
        int k = upperBound(nums, idx);
        int take = nums[idx][2] + solve(nums, k, n);

        // Not taking the current house
        int notTake = solve(nums, idx+1, n);

        return dp[idx] = max(take, notTake);
    }
public:
    int dp[100001];
    int maximizeTheProfit(int n, vector<vector<int>>& offers) {
        sort(offers.begin(), offers.end());
        memset(dp, -1, sizeof(dp));
        return solve(offers, 0, offers.size());
    }
};
