class Solution {
private:
    int solve(vector<vector<int>> &nums, int i, int j){
        // Base case
        int n = nums.size();
        if(j < 0 || j == n) return 1e8;
        if(i == n-1) return nums[i][j];

        if(dp[i][j] != INT_MIN) return dp[i][j];

        int c1 = solve(nums, i+1, j-1);
        int c2 = solve(nums, i+1, j+1);
        int c3 = solve(nums, i+1, j);

        return dp[i][j] = nums[i][j] + min({c1, c2, c3});
    }
public:
    int dp[101][101];
    int minFallingPathSum(vector<vector<int>>& matrix) {
        for(int i=0; i<101; i++){
            for(int j=0; j<101; j++){
                dp[i][j] = INT_MIN;
            }
        }

        int ans = 1e8, n = matrix.size();
        for(int i=0; i<n; i++){
            ans = min(ans, solve(matrix, 0, i));
        }

        return ans;
    }
};