class Solution:

    def coinChange(self, coins: List[int], amount: int) -> int:

        @lru_cache(None)
        def solve(idx, target):
            # Base case
            n = len(coins)
            if idx == n-1:
                if target == 0:
                    return 0
                elif target < coins[n-1] or target%coins[n-1] != 0:
                    return 1e7
                else:
                    return target//coins[n-1]

            
            c1 = 1e7

            if coins[idx] <= target:
                c1 = 1 + solve(idx, target-coins[idx])

            c2 = solve(idx+1, target)


            return min(c1, c2)


        ans = solve(0, amount)

        if ans >= 1e7:
            return -1

        return ans