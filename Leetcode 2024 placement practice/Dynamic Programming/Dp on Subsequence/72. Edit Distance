class Solution {
private:
    int solve(string &s1, string &s2, int i, int j){
        // Base case
        int n = s1.size(), m = s2.size();
        if(i == n || j == m){
            if(j == m) return s1.substr(i).size();
            return s2.substr(j).size();
        }


        if(dp[i][j] != -1) return dp[i][j];

        if(s1[i] == s2[j]){
            return dp[i][j] = solve(s1, s2, i+1, j+1);
        }

        int c1 = 1 + solve(s1, s2, i, j+1);
        int c2 = 1 + solve(s1, s2, i+1, j);
        int c3 = 1 + solve(s1, s2, i+1, j+1);

        return dp[i][j] = min({c1, c2, c3});
    }
public:
    int dp[501][501];
    int minDistance(string word1, string word2) {
        memset(dp, -1, sizeof(dp));
        return solve(word1, word2, 0, 0);
    }
};