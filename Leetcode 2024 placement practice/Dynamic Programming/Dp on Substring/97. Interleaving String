class Solution {
private:
    bool solve(string &s1, string &s2, string &s3, int i, int j){
        // Base case
        int k = i + j;
        if(i == s1.size() && j == s2.size()){
            return true;
        }
        else if(i == s1.size()){
            return s2.substr(j) == s3.substr(k);
        }
        else if(j == s2.size()){
            return s1.substr(i) == s3.substr(k);
        }

        if(dp[i][j] != -1) return dp[i][j];

        // Taking the string
        bool flag = false;
        if(s1[i] == s3[k]){
            flag = flag | solve(s1, s2, s3, i+1, j);
        }
        
        if(s2[j] == s3[k]){
            flag = flag | solve(s1, s2, s3, i, j+1);
        }
        
       
        return dp[i][j] = flag;
    }
public:
    int dp[101][101];
    int n, m, sz;
    bool isInterleave(string s1, string s2, string s3) {
        memset(dp, -1, sizeof(dp));
        int n = s1.size(), m = s2.size(), sz = s3.size();
        // Base case
        if(n+m != sz) return false;
        return solve(s1, s2, s3, 0, 0);
    }
};