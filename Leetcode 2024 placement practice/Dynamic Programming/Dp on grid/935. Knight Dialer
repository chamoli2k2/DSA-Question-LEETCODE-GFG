class Solution {
private:
    long long solve(vector<vector<int>> &nums, int i, int j, int len, int n){
        if(i < 0 || j < 0 || i >= 4 || j >= 3 || nums[i][j] == -1) return 0;
        if(len == n) return 1;

        if(dp[len][i][j] != -1) return dp[len][i][j];

        // We can move 8 direction
        long long c1 = solve(nums, i-1, j+2, len+1, n);
        long long c2 = solve(nums, i-1, j-2, len+1, n);
        long long c3 = solve(nums, i-2, j-1, len+1, n);
        long long c4 = solve(nums, i-2, j+1, len+1, n);
        long long c5 = solve(nums, i+1, j+2, len+1, n);
        long long c6 = solve(nums, i+1, j-2, len+1, n);
        long long c7 = solve(nums, i+2, j-1, len+1, n);
        long long c8 = solve(nums, i+2, j+1, len+1, n);


        return dp[len][i][j] = (c1%mod + c2%mod + c3%mod + c4%mod + c5%mod + c6%mod + c7%mod + c8%mod) % mod;
    }
public:
    int mod = 1e9 + 7;
    int dp[5001][4][3];
    int knightDialer(int n) {
        memset(dp, -1, sizeof(dp));

        vector<vector<int>> nums = {{1, 2, 3}, {4, 5, 6}, {7, 8, 9}, {-1, 0, -1}};
        long long ans = 0;
        for(int i=0; i<4; i++){
            for(int j=0; j<3; j++){
                if(nums[i][j] == -1) continue;
                long long count = solve(nums, i, j, 1, n);
                ans = (ans % mod + count % mod) % mod;
            }
        }

        return ans;
    }
};