class Solution {
private:
    int solve(vector<int> &nums, int i, int j){
        // Base case
        if(i == j) return 0;

        if(dp[i][j] != - 1) return dp[i][j];

        int totalSum = prefix[j];
        if(i > 0) totalSum -= prefix[i-1];
        int currSum = 0, ans = INT_MIN;
        for(int k=i; k<j; k++){
            currSum += nums[k];
            // If current sum is greater than remaining sum
            int tempAns;
            if(currSum > totalSum-currSum){
                tempAns = totalSum-currSum + solve(nums, k+1, j);
            }
            else if(currSum < totalSum-currSum){
                tempAns = currSum + solve(nums, i, k);
            }
            else{
                tempAns = currSum + max(solve(nums, i, k), solve(nums, k+1, j));
            }

            ans = max(ans, tempAns);
        }

        return dp[i][j] = ans;
    }
public:
    int dp[501][501];
    vector<int> prefix;
    int stoneGameV(vector<int>& stoneValue) {
        int n = stoneValue.size();
        prefix.resize(n);
        prefix[0] = stoneValue[0];
        for(int i=1; i<n; i++) prefix[i] = prefix[i-1] + stoneValue[i];
        memset(dp, -1, sizeof(dp));
        return solve(stoneValue, 0, n-1);
    }
};