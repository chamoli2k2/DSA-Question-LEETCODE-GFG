class Solution {
private:
    int solve(vector<int> &nums, int idx, int prev, int count, bool flag){
        // Base case
        int n = nums.size();
        if(idx == n){
            return count == 0;
        }

        if(flag == true && dp1[idx][count][prev+1] != -1) return dp1[idx][count][prev+1];
        if(flag == false && dp2[idx][count][prev+1] != -1) return dp2[idx][count][prev+1];

        int take = 0;
        if(prev == -1){
            take = solve(nums, idx+1, idx, count-1, flag);
        }
        else if(flag == true && nums[idx] > nums[prev] && count){
            take = solve(nums, idx+1, idx, count-1, flag);
        }
        else if(flag == false && nums[idx] < nums[prev] && count){
            take = solve(nums, idx+1, idx, count-1, flag);
        }

        int notTake = solve(nums, idx+1, prev, count, flag);

        if(flag) return dp1[idx][count][prev+1] = take + notTake;
        return dp2[idx][count][prev+1] = take + notTake;
    }
public:
    int dp1[1001][4][1002], dp2[1001][4][1002];
    int numTeams(vector<int>& rating) {
        int n = rating.size();
        memset(dp1, -1, sizeof(dp1));
        memset(dp2, -1, sizeof(dp2));

        int ans = 0;
        ans += solve(rating, 0, -1, 3, true);
        ans += solve(rating, 0, -1, 3, false);

        return ans;
    }
};