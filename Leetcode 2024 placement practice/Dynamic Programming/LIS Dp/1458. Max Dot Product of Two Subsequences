class Solution {
private:
    // This function calculates the maximum dot product considering elements from both vectors
    int solve(vector<int> &nums1, vector<int> &nums2, int i, int j, int n, int m){
        // Base case: If we've reached the end of either vector, return a very small value.
        if(i == n || j == m) return INT_MIN;

        // If the current state is already calculated, return its value.
        if(dp[i][j] != -1) return dp[i][j];

        // We have three cases to consider at each step:
        // 1. Multiply the current elements of both vectors and add it to the maximum product obtained from the next recursive call.
        int c1 = nums1[i] * nums2[j] + max(0, solve(nums1, nums2, i+1, j+1, n, m));
        // 2. Ignore the current element from the first vector and continue with the next element.
        int c2 = solve(nums1, nums2, i+1, j, n, m);
        // 3. Ignore the current element from the second vector and continue with the next element.
        int c3 = solve(nums1, nums2, i, j+1, n, m);

        // Choose the maximum product among the three cases.
        return dp[i][j] = max({c1, c2, c3});
    }
public:
    // Memoization table to store intermediate results
    int dp[501][501];
    
    // Function to find the maximum dot product between two vectors
    int maxDotProduct(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), m = nums2.size();
        
        // Initialize memoization table with -1
        memset(dp, -1, sizeof(dp));
        
        // Call the recursive function with initial parameters and return the result
        return solve(nums1, nums2, 0, 0, n, m);
    }
};
