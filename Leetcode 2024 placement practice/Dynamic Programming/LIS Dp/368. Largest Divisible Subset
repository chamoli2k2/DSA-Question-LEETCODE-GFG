class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        // Base case
        int n = nums.size(), maxLen = 1, maxIdx = 0;
        sort(begin(nums), end(nums));
        vector<int> dp(n, 1), parent(n, -1);

        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                if(nums[i]%nums[j] == 0){
                    if(dp[i] < 1+dp[j]){
                        dp[i] = 1 + dp[j];
                        parent[i] = j;
                    }
                }
            }

            if(maxLen < dp[i]){
                maxLen = dp[i];
                maxIdx = i;
            }
        }

        vector<int> ans;
        while(parent[maxIdx] != -1){
            ans.push_back(nums[maxIdx]);
            maxIdx = parent[maxIdx];
        }
        ans.push_back(nums[maxIdx]);
        reverse(ans.begin(), ans.end());

        return ans;
    }
};