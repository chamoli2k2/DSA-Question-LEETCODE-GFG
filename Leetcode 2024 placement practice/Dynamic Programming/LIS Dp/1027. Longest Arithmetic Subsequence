class Solution {
private:
    int solve(vector<int> &nums, int idx, int d){
        // Base case
        int n = nums.size();
        if(idx == n) return 0;

        if(dp[idx][600+d] != -1) return dp[idx][600+d];

        int ans = 0;
        for(int k=idx+1; k<n; k++){
            if(nums[k]-nums[idx] == d){
                ans = max(ans, 1+solve(nums, k, d));
            }
        }

        return dp[idx][600+d] = ans;
    }
public:
    int dp[1001][1200];
    int longestArithSeqLength(vector<int>& nums) {
        int n = nums.size(), ans = 2;
        memset(dp, -1, sizeof(dp));

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                int d = nums[j] - nums[i];
                ans = max(ans, 2 + solve(nums, j, d));
            }
        }

        return ans;
    }
};

class Solution {
public:
    int longestArithSeqLength(vector<int>& nums) {
        int n = nums.size(), ans = 2;
        vector<vector<int>> dp(n, vector<int> (1001, 0));

        for(int i=1; i<n; i++){
            for(int j=0; j<i; j++){
                int diff = nums[i] - nums[j] + 500;
                dp[i][diff] = max({dp[i][diff], dp[j][diff]+1, 2});
                ans = max(ans, dp[i][diff]);
            }
        }

        return ans;
    }
};