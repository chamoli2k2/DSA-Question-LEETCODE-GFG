class Solution {
private:
    void findMin(vector<int> &nums, vector<vector<int>> &smallest){
        int n = nums.size();
        stack<pair<int,int>> st1, st2;
        
        for(int i=0; i<n; i++){
            while(!st1.empty() && st1.top().first >= nums[i]){
                st1.pop();
            }

            while(!st2.empty() && st2.top().first > nums[n-1-i]){
                st2.pop();
            }

            if(st1.empty()){
                smallest[i][0] = -1;
            }
            else{
                smallest[i][0] = st1.top().second;
            }

            if(st2.empty()){
                smallest[n-1-i][1] = n;
            }
            else{
                smallest[n-1-i][1] = st2.top().second;
            }

            st1.push({nums[i], i});
            st2.push({nums[n-1-i], n-i-1});
        }


    }

    void findMax(vector<int> &nums, vector<vector<int>> &largest){
        int n = nums.size();
        stack<pair<int,int>> st1, st2;
        
        for(int i=0; i<n; i++){
            while(!st1.empty() && st1.top().first <= nums[i]){
                st1.pop();
            }

            while(!st2.empty() && st2.top().first < nums[n-1-i]){
                st2.pop();
            }

            if(st1.empty()){
                largest[i][0] = -1;
            }
            else{
                largest[i][0] = st1.top().second;
            }

            if(st2.empty()){
                largest[n-1-i][1] = n;
            }
            else{
                largest[n-i-1][1] = st2.top().second;
            }

            st1.push({nums[i], i});
            st2.push({nums[n-1-i], n-i-1});
        }

        
    }
public:
    long long subArrayRanges(vector<int>& nums) {
        long long n = nums.size(), ans = 0;
        vector<vector<int>> smallest(n, vector<int> (2)), largest(n, vector<int> (2));
        findMin(nums, smallest);
        findMax(nums, largest);

        for(int i=0; i<n; i++){
            long long leftMin = i-smallest[i][0], rightMin = smallest[i][1]-i;
            long long leftMax = i-largest[i][0], rightMax = largest[i][1]-i;

            ans += (leftMax*rightMax - leftMin*rightMin)*1LL*nums[i];
        }

        return ans;
    }
};