class Solution {
public:
    vector<long long> getDistances(vector<int>& arr) {
        unordered_map<int, vector<pair<int,long long>>> mp;
        int n = arr.size();
        vector<long long> ans(n);

        for(int i=0; i<n; i++){
            if(mp.count(arr[i]) == 0){
                mp[arr[i]].push_back({i, i});
            }
            else{
                int m = mp[arr[i]].size();
                long long newSum = mp[arr[i]][m-1].second + 1LL*i;
                mp[arr[i]].push_back({i, newSum});
            }
        }

        for(auto &it : mp){
            if(it.second.size() == 1) continue;

            vector<pair<int,long long>> nums = it.second;
            int x = it.first, m = nums.size();

            for(int i=0; i<m; i++){
                long long front = 0, back = 0;
                if(i > 0){
                    front = nums[i].first*1LL*i - nums[i-1].second;
                }

                back = (nums[m-1].second-nums[i].second) - (m-i-1)*1LL*nums[i].first;

                ans[nums[i].first] = (back + front);
            }
        }

        return ans;
    }
};