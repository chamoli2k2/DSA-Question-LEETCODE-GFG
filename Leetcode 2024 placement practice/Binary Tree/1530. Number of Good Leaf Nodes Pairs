/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    vector<int> solve(TreeNode *root, int dist){
        // Base case
        if(root == NULL) return {0};
        if(root->left == NULL && root->right == NULL) return {1};

        vector<int> ls = solve(root->left, dist);
        vector<int> rs = solve(root->right, dist);

        vector<int> newData;
        for(auto &it : ls){
            if(it == 0) continue;
            for(auto &jt : rs){
                if(jt == 0) continue;
                if(it+jt <= dist){
                    ans++;
                }
            }
        }

        for(auto &it : ls) if(it != 0 && it+1 <= dist) newData.push_back(it+1);
        for(auto &it : rs) if(it != 0 && it+1 <= dist) newData.push_back(it+1);

        return newData;
    }
public:
    int ans = 0;
    int countPairs(TreeNode* root, int distance) {
        solve(root, distance);
        return ans;
    }
};