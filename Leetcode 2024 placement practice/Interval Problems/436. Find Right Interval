class Solution {
private:
    int lowerBound(vector<vector<int>> &nums, int idx, int n){
        int target = nums[idx][1], s = idx, e = n-1, mid, ans = -1;

        while(s <= e){
            mid = s + (e - s) / 2;

            if(target <= nums[mid][0]){
                ans = nums[mid][2];
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        int n = intervals.size();
        vector<int> ans(n);

        for(int i=0; i<n; i++) intervals[i].push_back(i);

        sort(begin(intervals), end(intervals));

        for(int i=0; i<n; i++){
            int k = lowerBound(intervals, i, n);
            if(intervals[i][0] == intervals[i][1] && intervals[i][2] < k) k = intervals[i][2];
            ans[intervals[i][2]] = k;
        }
        

        return ans;
    }
};