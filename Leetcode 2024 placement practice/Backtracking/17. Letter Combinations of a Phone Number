class Solution {
private:
    void solve(string &s, int idx, string newStr){
        // Base case
        int n = s.size();
        if(idx == n){
            ans.push_back(newStr);
            return;
        }

        string currStr = mp[s[idx]-'0'];
        int m = currStr.size();

        for(int i=0; i<m; i++){
            newStr.push_back(currStr[i]);
            solve(s, idx+1, newStr);
            newStr.pop_back();
        }
    }
public:
    unordered_map<int, string> mp;
    vector<string> ans;
    vector<string> letterCombinations(string digits) {
        // Base case
        if(digits.size() == 0) return {};
        mp[2] = "abc", mp[3] = "def", mp[4] = "ghi", mp[5] = "jkl", mp[6] = "mno";
        mp[7] = "pqrs", mp[8] = "tuv", mp[9] = "wxyz";

        solve(digits, 0, "");
        return ans;
    }
};