class Solution {
public:
    int robotSim(vector<int>& commands, vector<vector<int>>& obstacles) {
        long long ans = 0, n = commands.size();
        unordered_map<int, unordered_map<int,bool>> mp;
        for(auto &it : obstacles){
            mp[it[0]][it[1]] = true;
        }

        long long dir = 1, x = 0, y = 0;
        for(int i=0; i<n; i++){
            if(commands[i] == -1){
                // North -> East
                if(dir == 1){
                    dir = 2;
                }
                // East -> South
                else if(dir == 2){
                    dir = 3;
                }
                // South -> West
                else if(dir == 3){
                    dir = 4;
                }
                // West -> south
                else{
                    dir = 1;
                }
            }
            else if(commands[i] == -2){
                if(dir == 1){
                    dir = 4;
                }
                else if(dir == 4){
                    dir = 3;
                }
                else if(dir == 3){
                    dir = 2;
                }
                else{
                    dir = 1;
                }
            }
            else{
                int flag = true;
                if(dir == 1){
                    for(int j=1; j<=commands[i]; j++){
                        if(mp[x][y+j] == 0){
                            ans = max(ans, (x*x) + ((y+j)*(y+j)));
                        }
                        else{
                            y = y + j-1;
                            flag = false;
                            break;
                        }
                    }
                    if(flag) y = y + commands[i];
                }
                else if(dir == 2){
                    for(int j=1; j<=commands[i]; j++){
                        if(mp[x+j][y] == 0){
                            ans = max(ans, ((x+j)*(x+j) + y*y));
                        }
                        else{
                            x = x + j - 1;
                            flag = false;
                            break;
                        }
                    }

                    if(flag) x = x + commands[i];
                }
                else if(dir == 3){
                    for(int j=1; j<=commands[i]; j++){
                        if(mp[x][y-j] == 0){
                            ans = max(ans, (x*x + (y-j)*(y-j)));
                        }
                        else{
                            y = y - j + 1;
                            flag = false;
                            break;
                        }
                    }
                    if(flag) y = y - commands[i];
                }
                else{
                    for(int j=1; j<=commands[i]; j++){
                        if(mp[x-j][y] == 0){
                            ans = max(ans, ((x-j)*(x-j) + y*y));
                        }
                        else{
                            x = x - j + 1;
                            flag = false;
                            break;
                        }
                    }

                    if(flag) x = x - commands[i];
                }
            }
        }

        return ans;
    }
};