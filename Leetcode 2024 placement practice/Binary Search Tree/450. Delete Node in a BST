/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* deleteNode(TreeNode* root, int key) {
        // Base case
        if(root == NULL) return NULL;

        // If we got the key
        if(root->val == key && root->left == NULL && root->right == NULL){
            return NULL;
        }
        else if(root->val == key && root->right == NULL){
            TreeNode* leftNode = root->left;
            return leftNode;
        }
        else if(root->val == key){
            TreeNode* rightNode = root->right;
            while(rightNode->left){
                rightNode = rightNode->left;
            }
            root->val = rightNode->val;
            root->right = deleteNode(root->right, rightNode->val);
            return root;
        }

        if(root->val > key){
            root->left = deleteNode(root->left, key);
        }
        else{
            root->right = deleteNode(root->right, key);
        }

        return root;
    }
};