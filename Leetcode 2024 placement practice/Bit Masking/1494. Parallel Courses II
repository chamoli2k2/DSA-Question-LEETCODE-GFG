class Solution {
private:
    int solve(vector<int> adj[], vector<int> &indegree, int mask){
        // If every course is taken
        if(mask == 0) return 0;

        if(dp.count(mask)) return dp[mask];

        // Taking the course which has indegree 0 and not visited
        vector<int> nodes;
        for(int i=0; i<n; i++){
            if((mask&(1<<i)) && indegree[i] == 0){
                nodes.push_back(i);
            }
        }

        // Generating the all combinations of nodes
        vector<vector<int>> combinations = generateCombination(nodes, min(k, (int)nodes.size()));

        int ans = INT_MAX;
        for(auto combination : combinations){
            vector<int> newIndegree = indegree;
            int newMask = mask;

            for(auto node : combination){

                newMask &= (~(1 << node));
                for(auto it : adj[node]){
                    newIndegree[it]--;
                }
            }

            ans = min(ans, 1+solve(adj, newIndegree, newMask));
        }

        return dp[mask] = ans;
    }

    vector<vector<int>> generateCombination(vector<int> &nodes, int k){
        int n = nodes.size();
        int total_combination = (1<<n) - 1;
        vector<vector<int>> combinations;

        for(int mask=0; mask<=total_combination; mask++){
            // Count the number of set bits in the mask
            int count = __builtin_popcount(mask);

            if(count == k){
                vector<int> temp;
                for(int i=0; i<n; i++){
                    if(mask & (1<<i)){
                        temp.push_back(nodes[i]);
                    }
                }
                combinations.push_back(temp);
            }
        }

        return combinations;
    }
public:
    unordered_map<int,int> dp;
    int k, n;
    int minNumberOfSemesters(int n, vector<vector<int>>& relations, int k) {
        this->k = k;
        this->n = n;
        vector<int> adj[n], indegree(n, 0);
        for(auto &it : relations){
            int u = it[0]-1, v = it[1]-1;
            // Toposort
            // If there is a edge between u & v (u => v) than in toposort
            // u should appear before v
            adj[u].push_back(v);
            indegree[v]++;
        }
        
        int mask = (1<<n) - 1;

        return solve(adj, indegree, mask);
    }
};