class Solution {
private:
    int solve(vector<vector<int>> &grid, int i, int j){
        // Base case
        if(i == n || j == m) return -1e8;

        if(dp[i][j] != -1e8) return dp[i][j];

        // We have three case
        int maxDown = solve(grid, i+1, j);
        int maxRight = solve(grid, i, j+1);
        int current = grid[i][j];

        return dp[i][j] = max({maxDown, maxRight, current});
    }
public:
    int dp[1001][1001], n, m;
    int maxScore(vector<vector<int>>& grid) {
        for(int i=0; i<1001; i++){
            for(int j=0; j<1001; j++){
                dp[i][j] = -1e8;
            }
        }

        n = grid.size(), m = grid[0].size();
        int ans = -1e8;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                int maxDown = solve(grid, i+1, j);
                int maxRight = solve(grid, i, j+1);
                ans = max({ans, maxDown-grid[i][j], maxRight-grid[i][j]});
            }
        }
        
        return ans;
    }
};