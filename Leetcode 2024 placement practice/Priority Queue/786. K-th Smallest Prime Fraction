// Approach 1
typedef vector<double> v;
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        vector<int> ans;
        int n = arr.size();
        priority_queue<v, vector<v>, greater<v>> pq;

        for(int i=0; i<arr.size(); i++){
            pq.push({1.0*arr[i]/arr[n-1], 1.0*i, 1.0*n-1});
        }

        int smallest = 1;

        while(smallest < k){
            double i = pq.top()[1];
            double j = pq.top()[2] - 1;

            pq.pop();

            pq.push({1.0*arr[i]/arr[j], i, j});
            smallest++;
        }

        int x = arr[pq.top()[1]];
        int y = arr[pq.top()[2]];
        return {x, y};
    }
};

// Approach 2
typedef pair<double,pair<int,int>> p;
class Solution {
public:
    vector<int> kthSmallestPrimeFraction(vector<int>& arr, int k) {
        int n = arr.size();
        priority_queue<p> pq;

        for(int i=0; i<n; i++){
            for(int j=i+1; j<n; j++){
                double val = (1.0*arr[i]) / (1.0*arr[j]);
                pq.push({val, {i, j}});

                if(pq.size() > k) pq.pop();
            }
        }

        int i = pq.top().second.first;
        int j = pq.top().second.second;

        return {arr[i], arr[j]};
    }
};