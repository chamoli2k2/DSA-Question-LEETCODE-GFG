class DisJointSet {
public:
    vector<int> size, parent;
    // Constructor
    DisJointSet(int n) {
        size.resize(n + 1, 1);
        parent.resize(n + 1);
        for (int i = 0; i <= n; i++) {
            parent[i] = i;
        }
    }

    // Finding ultimate parent of node
    int findUPar(int node) {
        // Finding Parent
        if (node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u, int v) {
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if (ulp_u == ulp_v) return;
        if (size[ulp_u] < size[ulp_v]) {
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        } else {
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
public:
    int swimInWater(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> nums(n * m);
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int idx = m * i + j;
                nums[idx] = {grid[i][j], i, j};
            }
        }

        sort(nums.begin(), nums.end());
        DisJointSet ds(n * m);

        int sz = nums.size();
        int dc[] = {1, -1, 0, 0};
        int dr[] = {0, 0, -1, 1};

        for (int i = 0; i < sz; i++) {
            int wt = nums[i][0], x = nums[i][1], y = nums[i][2];

            for (int k = 0; k < 4; k++) {
                int row = x + dr[k];
                int col = y + dc[k];
                if (row >= 0 && row < n && col >= 0 && col < m) {
                    int node = x * m + y;
                    int adjNode = row * m + col;
                    if(ds.findUPar(node) != ds.findUPar(adjNode) && grid[x][y] > grid[row][col]){
                        ds.unionBySize(node, adjNode);
                    }
                }
            }

            // Checking condition after union operations
            if (ds.findUPar(0) == ds.findUPar(n * m - 1)) {
                // Because it is the maximum weight till now
                return wt;
            }
        }

        return -1; // This line should never be reached
    }
};