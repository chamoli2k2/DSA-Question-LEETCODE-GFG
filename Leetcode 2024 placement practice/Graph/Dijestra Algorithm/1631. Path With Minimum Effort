class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size();
        vector<vector<int>> dist(n, vector<int>(m, 1e8));
        int ans = INT_MAX;

        priority_queue<pair<int, pair<int,int>>> pq;
        pq.push({0, {0, 0}});
        int dc[] = {1, -1, 0, 0};
        int dr[] = {0, 0, 1, -1};

        while(!pq.empty()){
            int cost = -pq.top().first;
            int i = pq.top().second.first;
            int j = pq.top().second.second;
            pq.pop();


            if(i == n-1 && j == m-1){
                return cost;
            }

            for(int k=0; k<4; k++){
                int row = i + dr[k];
                int col = j + dc[k];

                if(row >= 0 && row < n && col >= 0 && col < m){
                    int d = max(cost, abs(grid[i][j]-grid[row][col]));
                    if(dist[row][col] > d){
                        dist[row][col] = d;
                        pq.push({-d, {row, col}});
                    }
                }
            }

        }

        return 0;
    }
};