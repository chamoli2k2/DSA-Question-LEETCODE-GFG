class Solution {
public:
    int minimumTime(int n, vector<vector<int>>& relations, vector<int>& time) {
        // Base case
        if(n == 1) return time[0];
        vector<int> adj[n+1], inorder(n+1, 0);
        for(auto it : relations){
            int u = it[0], v = it[1];
            adj[u].push_back(v);
            inorder[v]++;
        }

        queue<int> q;
        vector<int> time_taken(n+1, -1);
        for(int i=1; i<=n; i++){
            if(inorder[i] == 0){
                q.push(i);
                time_taken[i] = time[i-1];
            }
        }

        int ans = 0;

        while(!q.empty()){
            int m = q.size();

            for(int i=0; i<m; i++){
                int node = q.front();
                q.pop();

                for(auto it : adj[node]){
                    time_taken[it] = max(time_taken[it], time_taken[node]+time[it-1]);
                    inorder[it]--;
                    if(inorder[it] == 0){
                        q.push(it);
                    }
                }
            }
        }

        for(int i=1; i<=n; i++){
            ans = max(ans, time_taken[i]);
        }

        return ans;
    }
};