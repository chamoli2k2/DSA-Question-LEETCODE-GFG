class Solution {
private:
    int solve(vector<vector<int>> &grid, vector<vector<bool>> &visited, int i, int j,int n, int m){
        // Base case
        if(i < 0 || j < 0 || j == m || i == n || grid[i][j] == 0) return 1;
        if(visited[i][j]) return 0;

        visited[i][j] = true;

        int c1 = solve(grid, visited, i+1, j, n, m);
        int c2 = solve(grid, visited, i-1, j, n, m);
        int c3 = solve(grid, visited, i, j-1, n, m);
        int c4 = solve(grid, visited, i, j+1, n, m);

        return c1 + c2 + c3 + c4;
    }
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), ans = 0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1){
                    vector<vector<bool>> visited(n, vector<bool> (m, false));
                    ans = solve(grid, visited, i, j, n, m);
                    break;
                }
            }
        }

        return ans;
    }
};