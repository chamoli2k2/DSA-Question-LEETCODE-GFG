class Solution {
private:
    void solve(vector<vector<char>> &grid, vector<vector<bool>> &visited, int i, int j, int n, int m){
        // Base case
        if(i < 0 || j < 0 || i == n || j == m || visited[i][j] || grid[i][j] == '0') return;

        visited[i][j] = true;

        // visited all four direction 
        solve(grid, visited, i+1, j, n, m);
        solve(grid, visited, i-1, j, n, m);
        solve(grid, visited, i, j+1, n, m);
        solve(grid, visited, i, j-1, n, m);
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        int n = grid.size(), m = grid[0].size(), ans = 0;
        vector<vector<bool>> visited(n, vector<bool>(m, false));

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == '1' && visited[i][j] == false){
                    ans++;
                    solve(grid, visited, i, j, n, m);
                }
            }
        }

        return ans;
    }
};