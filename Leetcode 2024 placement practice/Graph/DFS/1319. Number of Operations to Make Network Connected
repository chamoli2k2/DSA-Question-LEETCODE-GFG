class Solution {
private:
    void dfs(vector<int> adjList[], vector<int> &visited, int node){
        visited[node] = 1;

        for(auto &it : adjList[node]){
            if(visited[it] == 0){
                dfs(adjList, visited, it);
            }
        }
    }
public:
    int makeConnected(int n, vector<vector<int>>& connections) {
        // Base case
        int edgesCount = connections.size();
        if(edgesCount < n-1) return -1;

        vector<int> visited(n, 0);
        vector<int> adjList[n];
        for(auto &it : connections){
            adjList[it[0]].push_back(it[1]);
            adjList[it[1]].push_back(it[0]);
        }

        int componentCount = 0;
        for(int i=0; i<n; i++){
            if(visited[i] == 0){
                dfs(adjList, visited, i);
                componentCount++;
            }
        }


        return componentCount-1;
    }
};