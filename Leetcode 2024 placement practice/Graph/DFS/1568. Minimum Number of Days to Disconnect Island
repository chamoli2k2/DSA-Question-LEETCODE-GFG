class Solution {
private:
    void countNoOfIslands(vector<vector<int>> &grid, vector<vector<int>> &visited, int i, int j){
        int n = grid.size(), m = grid[0].size();
        if(i < 0 || j < 0 || i == n || j == m || visited[i][j] == 1 || grid[i][j] == 0) return;

        visited[i][j] = 1;

        countNoOfIslands(grid, visited, i+1, j);
        countNoOfIslands(grid, visited, i-1, j);
        countNoOfIslands(grid, visited, i, j+1);
        countNoOfIslands(grid, visited, i, j-1);
    }
public:
    int minDays(vector<vector<int>>& grid) {
        int n = grid.size(), m = grid[0].size(), count = 0;
        vector<vector<int>> visited(n, vector<int> (m, 0));

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(visited[i][j] == 0 && grid[i][j] == 1){
                    count++;
                    if(count == 2) return 0;
                    countNoOfIslands(grid, visited, i, j);
                } 
            }

        }

        if(count == 0 || count > 1) return 0;

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 1){
                    count = 0;
                    grid[i][j] = 0;
                    vector<vector<int>> mp(n, vector<int> (m, 0));
                    for(int k1=0; k1<n; k1++){
                        for(int k2=0; k2<m; k2++){
                            if(mp[k1][k2] == 0 && grid[k1][k2] == 1){
                                count++;
                                if(count == 2) return 1;
                                countNoOfIslands(grid, mp, k1, k2);
                            }
                        }
                    }

                    if(count == 0 || count > 1) return 1;

                    grid[i][j] = 1;
                }
            }
        }

        return 2;
    }
};