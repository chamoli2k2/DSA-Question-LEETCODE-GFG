class Solution {
private:
    void dfs(vector<int> adjList[], vector<int> &visited, vector<int> &nodeList, int node){
        visited[node] = 1;
        nodeList.push_back(node);


        for(auto it : adjList[node]){
            if(visited[it] == 0){
                dfs(adjList, visited, nodeList, it);
            }
        }
    }
public:
    int countCompleteComponents(int n, vector<vector<int>>& edges) {
        vector<int> adjList[n], visited(n, 0);

        for(auto it : edges){
            adjList[it[0]].push_back(it[1]);
            adjList[it[1]].push_back(it[0]);
        }


        int ans = 0;

        for(int i=0; i<n; i++){
            if(visited[i] == 0){
                vector<int> nodes;
                dfs(adjList, visited, nodes, i);

                int flag = 1, m = nodes.size();
                for(int i=0; i<m; i++){
                    if(adjList[nodes[i]].size() != m-1){
                        flag = 0;
                        break;
                    }
                }

                if(flag) ans++;
            }
        }

        return ans;
    }
};