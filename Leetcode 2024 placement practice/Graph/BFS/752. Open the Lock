class Solution {
public:
    int openLock(vector<string>& deadends, string target) {
        unordered_map<string, bool> visited;
        for(auto it : deadends) visited[it] = true;
        // Base case
        if(visited["0000"]) return -1;

        queue<pair<string, int>>  q;
        q.push({"0000", 0});
        visited["0000"] = true;
        
        while(!q.empty()){
            string node = q.front().first;
            int cost = q.front().second;
            q.pop();

            if(node == target){
                return cost;
            }

            for(int i=0; i<4; i++){
                char ch = node[i];
                // Incrementing
                if(node[i] == '9'){
                    node[i] = '0';
                }
                else{
                    node[i] = ((node[i]-'0')+1) + '0';
                }

                if(visited[node] == 0){
                    visited[node] = 1;
                    q.push({node,cost+1});
                }
                node[i] = ch;

                // Decrementing
                if(node[i] == '0'){
                    node[i] = '9';
                }
                else{
                    node[i] = ((node[i]-'0')-1) + '0';
                }

                if(visited[node] == 0){
                    visited[node] = 1;
                    q.push({node,cost+1});
                }
                node[i] = ch;
            }
        }

        return -1;
    }
};