class Solution {
private:
    void dfs(vector<vector<char>> &grid, int i, int j){
        // Base case
        if(i < 0 || j < 0 || i == n || j == m || grid[i][j] == 'X' || visited[i][j] == 1){
            return;
        }

        visited[i][j] = 1;

        dfs(grid, i+1, j);
        dfs(grid, i-1, j);
        dfs(grid, i, j+1);
        dfs(grid, i, j-1);
    }
public:
    int visited[202][202];
    int n, m;
    void solve(vector<vector<char>>& grid) {
        n = grid.size(), m = grid[0].size();

        memset(visited, -1, sizeof(visited));
        
        // Checking the top and bottom row
        for(int j=0; j<m; j++){
            if(grid[0][j] == 'O' && visited[0][j] == -1){
                dfs(grid, 0, j);
            }

            if(grid[n-1][j] == 'O' && visited[n-1][j] == -1){
                dfs(grid, n-1, j);
            }
        }

        for(int i=0; i<n; i++){
            if(grid[i][0] == 'O' && visited[i][0] == -1){
                dfs(grid, i, 0);
            }

            if(grid[i][m-1] == 'O' && visited[i][m-1] == -1){
                dfs(grid, i, m-1);
            }
        }

        for(int i=0; i<n; i++){
            for(int j=0; j<m; j++){
                if(grid[i][j] == 'O' && visited[i][j] == -1){
                    grid[i][j] = 'X';
                }
            }
        }
    }
};