class Solution {
public:
    int findMinDifference(vector<string>& timePoints) {
        sort(begin(timePoints), end(timePoints), [&](string s1, string s2){
            double n1 = 1.0*s1[0]*10 + 1.0*s1[1] + 0.1*s1[3] + 0.01*s1[4];
            double n2 = 1.0*s2[0]*10 + 1.0*s2[1] + 0.1*s2[3] + 0.01*s2[4];

            return n1 < n2;
        });


        int ans = INT_MAX, n = timePoints.size();
        for(int i=1; i<n; i++){
            int minDiff = ((timePoints[i][0]-'0')*10+(timePoints[i][1]-'0')) - ((timePoints[i-1][0]-'0')*10 + (timePoints[i-1][1]-'0'));
            minDiff = minDiff * 60;
            minDiff += ((timePoints[i][3]-'0')*10+(timePoints[i][4]-'0'));
            minDiff -= ((timePoints[i-1][3]-'0')*10+(timePoints[i-1][4]-'0'));
            ans = min(ans, minDiff);
        }

        int k1 = ((timePoints[n-1][0]-'0')*10+(timePoints[n-1][1]-'0')), k2 = ((timePoints[0][0]-'0')*10 + (timePoints[0][1]-'0'));
        int fDiff = (24+k2-k1)*60 - ((timePoints[n-1][3]-'0')*10 + (timePoints[n-1][4]-'0')) + ((timePoints[0][3]-'0')*10 + (timePoints[0][4]-'0'));

        ans = min(ans, fDiff);

        return ans;
    }
};