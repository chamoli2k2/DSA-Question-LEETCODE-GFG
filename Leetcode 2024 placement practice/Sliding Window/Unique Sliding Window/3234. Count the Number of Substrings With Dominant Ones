class Solution {
public:
    int numberOfSubstrings(string s) {
        int n = s.size();
        vector<int> prefixOne(n, 0);
        prefixOne[0] = (s[0] == '1' ? 1 : 0);
        vector<int> zeroIdx;
        if(s[0] == '0') zeroIdx.push_back(0);

        for(int i=1; i<n; i++){
            prefixOne[i] = prefixOne[i-1] + (s[i] == '1' ? 1 : 0);

            if(s[i] == '0') zeroIdx.push_back(i);
        }

        zeroIdx.push_back(n);

        int ans = 0;
        for(int i=0; i<n; i++){
            int j = i;

            while(j < n){
                int countOne = prefixOne[j];
                if(i != 0) countOne -= prefixOne[i-1];
                int countZero = (j-i+1) - countOne;

                if(countOne >= countZero*countZero){
                    int nextZero = upper_bound(zeroIdx.begin(), zeroIdx.end(), j) - zeroIdx.begin();
                    ans += zeroIdx[nextZero]-j;
                    j = zeroIdx[nextZero];
                }
                else{
                    j += (countZero*countZero)-countOne;
                }
            }
        }


        return ans;
    }
};