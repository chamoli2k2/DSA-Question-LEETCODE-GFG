class Solution {
public:
    long long minimumOperations(vector<int>& nums, vector<int>& target) {
        long long n = nums.size(), ans = 0;
        vector<long long> dp(n, 0);

        for(int i=0; i<n; i++){
            dp[i] = (target[i] - nums[i])*1LL;
        }

        long long prev = 0;
        for(int i=0; i<n; i++){
            int currDiff = dp[i];
            if(currDiff > 0 && prev > 0){
                if(currDiff > prev){
                    ans += (currDiff-prev);
                    prev += (currDiff-prev);
                }
                else{
                    prev = currDiff;
                }
            }
            else if(currDiff < 0 && prev < 0){
                if(currDiff < prev){
                    ans += (prev - currDiff);
                    prev -= (prev - currDiff);
                }
                else{
                    prev = currDiff;
                }
            }
            else{
                ans += abs(currDiff);
                prev = currDiff;
            }
        }

        return ans;
    }
};