class Solution {
public:
    int leastInterval(vector<char>& tasks, int k) {
        int n = tasks.size(), maxFreq = 0;
        unordered_map<char,int> mp;
        char maxChar;

        for(auto &ch : tasks){
            mp[ch]++;
            if(maxFreq < mp[ch]){
                maxChar = ch;
                maxFreq = mp[ch];
            }
        }

        int idealSpace = k * (maxFreq-1);
        int gapCount = maxFreq-1;
        mp.erase(maxChar);


        for(auto &[ch, freq] : mp){
            idealSpace -= min(freq, gapCount);
        }

        return idealSpace <= 0 ? n : n + idealSpace;     
    }
};