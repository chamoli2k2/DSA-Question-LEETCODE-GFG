class Solution {
public:
    TreeNode* mergeTrees(TreeNode* root1, TreeNode* root2) {
        // base case
        // if anyone from root1 or root2 is NULL return other one
        if(root1 == NULL) return root2;
        if(root2 == NULL) return root1;
        
        // We are changing the data in root1 and returning it
        // doing preorder traversal
        root1->val += root2->val;
        
        root1->left = mergeTrees(root1->left,root2->left);
        root1->right = mergeTrees(root1->right,root2->right);
        
        return root1;
    }
};
