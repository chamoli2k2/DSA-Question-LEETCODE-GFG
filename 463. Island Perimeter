class Solution {
private:
    int dfs(vector<vector<int>> &grid,vector<vector<int>> &visited,int i,int j,int n,int m){
        // Base case
        if(i < 0 || i >= n || j < 0 || j >= m || grid[i][j] == 0){
            return 1;
        }

        // Checking if already visited
        if(visited[i][j] == 1) return 0;

        // marking visited
        visited[i][j] = 1;

        // Traversing all side
        int ls = dfs(grid,visited,i,j-1,n,m); // left 
        int rs = dfs(grid,visited,i,j+1,n,m); // right
        int us = dfs(grid,visited,i+1,j,n,m); // up
        int ds = dfs(grid,visited,i-1,j,n,m); // down

        return ls + rs + us + ds;
    }
public:
    int islandPerimeter(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        vector<vector<int>> visited(n,vector<int>(m,0));
        int ans = 0;

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 && visited[i][j] == 0){
                    ans += dfs(grid,visited,i,j,n,m);
                    break;
                }
            }
        }

        return ans;
    }
};
