class Solution {
public:
    vector<vector<int>> kSmallestPairs(vector<int>& nums1, vector<int>& nums2, int k) {
        int n = size(nums1), m = size(nums2);
        if(n == 0 || m == 0 || k == 0) return {};
        vector<vector<int>> ans;
        
        // Initialising Priority Queue

        auto comp = [&](vector<int> &p1,vector<int> &p2) {
            return p1[0] + p1[1] > p2[0] + p2[1];
        };
        priority_queue<vector<int>, vector<vector<int>>, decltype(comp)> pq(comp);

        for(int i=0;i<n && i<k;i++){
            pq.push({nums1[i],nums2[0],0});
        }

        while(k-- && !pq.empty()){
            vector<int> arr = pq.top();
            pq.pop();

            ans.push_back({arr[0],arr[1]});

            // Pushing new element into priority queue
            if(arr[2]+1 < m){
                pq.push({arr[0],nums2[arr[2]+1],arr[2]+1});
            }
        }

        return ans;
    }
};
