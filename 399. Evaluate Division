class Solution {
private:
    void dfs(string start,string end,unordered_map<string,double>& mp,unordered_map<string,vector<string>>& graph,double& val,unordered_map<string,int>& visited,bool& found){
        visited[start]=1;
    
        if(found==true)
            return ;
        for(auto child:graph[start]){
            if(visited[child]!=1){
                // cout<<start<<" "<<child<<"\n";
                val*=mp[start+"->"+child];
                if(end==child){
                    // cout<<end<<" -- "<<child<<"\n";
                    found=true;
                    return ;
                }
                dfs(child,end,mp,graph,val,visited,found);
                if(found==true){
                    return ;
                }
                else{
                    val/=mp[start+"->"+child];
                }
            }
        }
       
        
    }
public:
    vector<double> calcEquation(vector<vector<string>>& eq, vector<double>& val, vector<vector<string>>& q) {
        unordered_map<string,double> mp1;
        unordered_map<string,vector<string>> mp2;
        vector<double> ans;

        for(int i=0;i<size(eq);i++){
            string u = eq[i][0], v = eq[i][1];

            // storing the value of nodes
            mp1[u+"->"+v] = val[i];
            mp1[v+"->"+u] = 1 / val[i];

            // storing the path
            mp2[u].push_back(v);
            mp2[v].push_back(u);
        }


        for(auto it : q){
            string s = it[0], e = it[1];

            if(mp2.find(s) == mp2.end() || mp2.find(e) == mp2.end()){
                ans.push_back(-1);
            }
            else{
                double val = 1;
                bool flag = false;
                unordered_map<string,int> visited;
                if(s == e){
                    flag = true;
                }
                else{
                    dfs(s,e,mp1,mp2,val,visited,flag);
                }

                if(flag){
                    ans.push_back(val);
                }
                else{
                    ans.push_back(-1);
                }
            }
        }

        return ans;
    }
};
