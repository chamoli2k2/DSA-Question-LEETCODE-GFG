class Solution {
public:
    bool validSquare(vector<int>& p1, vector<int>& p2, vector<int>& p3, vector<int>& p4) {
        // A square has 4 equal sides and 2 equal diagonals 
        
        int d1 = (p2[1]-p1[1])*(p2[1]-p1[1]) + (p2[0]-p1[0])*(p2[0]-p1[0]);
        int d2 = (p4[1]-p3[1])*(p4[1]-p3[1]) + (p4[0]-p3[0])*(p4[0]-p3[0]);
        int d3 = (p4[1]-p1[1])*(p4[1]-p1[1]) + (p4[0]-p1[0])*(p4[0]-p1[0]);
        int d4 = (p3[1]-p1[1])*(p3[1]-p1[1]) + (p3[0]-p1[0])*(p3[0]-p1[0]);
        int d5 = (p2[1]-p4[1])*(p2[1]-p4[1]) + (p2[0]-p4[0])*(p2[0]-p4[0]);
        int d6 = (p2[1]-p3[1])*(p2[1]-p3[1]) + (p2[0]-p3[0])*(p2[0]-p3[0]);

        unordered_map<int,int> mp;
        mp[d1]++;
        mp[d2]++;
        mp[d3]++;
        mp[d4]++;
        mp[d5]++;
        mp[d6]++;

        if(mp.size() != 2 || d1 == 0 || d2 == 0 || d3 == 0 || d4 == 0 || d5 == 0 || d6 == 0) return false;

        if(mp[d1] == 4 || mp[d1] == 2) return true;

        return false;
    }
};
