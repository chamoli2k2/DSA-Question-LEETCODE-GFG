class Solution {
    long long Cmb(long long n){
        long long ans = (n * (n-1)) / 2;
        return ans;
    }

    int solve(unordered_map<int,list<int>> &mp,vector<int> &visited,int node){
        visited[node] = 1;

        int ans = 1;
        for(auto it : mp[node]){
            if(visited[it] == 0){
                ans += solve(mp,visited,it);
            }
        }

        return ans;
    }
public:
    long long countPairs(int n, vector<vector<int>>& edges) {
        long long ans = Cmb(n);
        unordered_map<int,list<int>> mp;
        for(auto it : edges){
            mp[it[0]].push_back(it[1]);
            mp[it[1]].push_back(it[0]);
        }
        vector<int> visited(n,0);

        for(int i=0;i<n;i++){
            if(visited[i] == 0){
                long long t = solve(mp,visited,i);
                long long sub = 0;
                if(t > 1) sub = Cmb(t);
                ans -= sub;
            }
        }

        return ans;
    }
};
