Approach 1 : With simple recursion but it will give TLE. 
class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int knapSack(int w, int wt[], int val[], int n) 
    { 
       // base case 
       if(n == 0 or w == 0){
           return 0;
       }
       
       // Now we have two choices either to include the weight in knapsack or leave it.
       // From both situation we have to find the condition in which we are getting maximum value
       // for that we have to check if weight at "ith" index is less than knapsack capacity 
       
       if(wt[n-1] <= w){
           return max(val[n-1]+knapSack(w-wt[n-1],wt,val,n-1),knapSack(w,wt,val,n-1));
       }else if(wt[n-1] > w){
           return knapSack(w,wt,val,n-1);
       }
    }
};

Approach 2 : Using memonizing techinque or top-down technique (DP)

class Solution
{
    public:
    //Function to return max value that can be put in knapsack of capacity W.
    int solve(int w, int wt[], int val[], int n, vector<vector<int>> &t){
        // base case 
      if(n <= 0 or w <= 0){
          return 0;
      }
       
      // Checking if in matrix value is already available of not?
      if(t[w][n] != -1){
          return t[w][n];
      }

        // if value is not present
      // Now we have two choices either to include the weight in knapsack or leave it.
      // From both situation we have to find the condition in which we are getting maximum value
      // for that we have to check if weight at "ith" index is less than knapsack capacity 
       
      if(wt[n-1] <= w){
          t[w][n] =  max(val[n-1]+solve(w-wt[n-1],wt,val,n-1,t),solve(w,wt,val,n-1,t));
          return t[w][n];
      }else if(wt[n-1] > w){
          t[w][n] = solve(w,wt,val,n-1,t);
          return t[w][n];
      }
    }
    int knapSack(int w, int wt[], int val[], int n) 
    { 
        // Declaring the memorize variable (we decide size by seeing what is changing in matrix)
        vector<vector<int>> t(w+1,vector<int>(n+1,-1)); // t[w][n];
        return solve(w,wt,val,n,t);
    }
};
