class Solution {
private:
    int solve(vector<vector<int>> &dungeon,int i,int j){
        // Base case 1 
        if(i == dungeon.size() || j == dungeon[0].size()){
            return 1e7;
        }
        // Base case 2
        if(i == dungeon.size()-1 && j == dungeon[0].size()-1){
            if(dungeon[i][j] <= 0) return 1 - dungeon[i][j];
            else return 1;
        }

        if(dp[i][j] != -1) return dp[i][j];

        // Moving down and right
        int down = solve(dungeon,i+1,j);
        int right = solve(dungeon,i,j+1);

        // Checking the current health
        int health = min(down,right) - dungeon[i][j];

        return dp[i][j] = (health <= 0) ? 1 : health;
    }

public:
    int dp[201][201];
    int calculateMinimumHP(vector<vector<int>>& dungeon) {
        memset(dp,-1,sizeof(dp));
        return solve(dungeon,0,0);
    }
};
