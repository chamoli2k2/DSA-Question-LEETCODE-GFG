class Solution {
  public:
    int mod = 1e9 + 7;
    int countPaths(int n, vector<vector<int>>& roads) {
        vector<pair<long long, long long>> adj[n];
        for(auto &it : roads){
            adj[it[0]].push_back({it[1],it[2]});
            adj[it[1]].push_back({it[0],it[2]});
        }

        priority_queue<pair<long long,int>,vector<pair<long long,int>>,greater<pair<long long,int>>> pq;
        pq.push({0,0});

        vector<long long> dist(n,LONG_MAX), ways(n,0);
        dist[0] = 0, ways[0] = 1;

        while(!pq.empty()){
            int node = pq.top().second;
            long long di = pq.top().first;
            pq.pop();

            for(auto &it : adj[node]){
                long long adjNode = it.first, edW = it.second;
                // Arriving 1st time at with shorter path
                if(di+edW < dist[adjNode]){
                    dist[adjNode] = (di + edW);
                    pq.push({dist[adjNode],adjNode});
                    ways[adjNode] = ways[node];
                }
                // Arriving the adjNode with same distance as already 
                else if(di+edW == dist[adjNode]){
                    ways[adjNode] = (ways[adjNode]%mod + ways[node]%mod) % mod;
                }
            }
        }

        return ways[n-1] % mod;
    }
};
