class Solution {
public:
    double maxProbability(int n, vector<vector<int>>& edges, vector<double>& succProb, int start, int end) {
        unordered_map<int,list<pair<int,double>>> mp;
        for(int i=0;i<edges.size();i++){
            mp[edges[i][0]].push_back({edges[i][1],succProb[i]});
            mp[edges[i][1]].push_back({edges[i][0],succProb[i]});
        }
        vector<double> maxi(n,0);
        priority_queue<pair<double,int>> pq;
        pq.push({1.0,start});
        maxi[start] = 1.0;

        while(!pq.empty()){
            double p = pq.top().first;
            int node = pq.top().second;
            pq.pop();

            for(auto it : mp[node]){
                int adjNode = it.first;
                double prob = it.second;
                if(maxi[adjNode] < p*prob){
                    pq.push({p*prob,adjNode});
                    maxi[adjNode] = p*prob;
                }
            }
        }


        return maxi[end];
    }
};
