class Solution {
  private:
    void dfs(vector<vector<int>> &grid,vector<vector<int>> &visited,int i,int j){
        // base case
        if(i >= grid.size() || j >= grid[0].size() || i < 0 || j < 0 || visited[i][j] == 1 || grid[i][j] == 0){
            return;
        }

        visited[i][j] = 1;
        
        // Moving in all direction
        dfs(grid,visited,i,j-1); // left
        dfs(grid,visited,i,j+1); // right
        dfs(grid,visited,i-1,j); // up
        dfs(grid,visited,i+1,j); // down
    }
    
  public:
    vector<int> numOfIslands(int n, int m, vector<vector<int>> &operators) {
        int k = operators.size();
        vector<vector<int>> grid(n,vector<int>(m,0));
        vector<int> ans;
        
        for(int i=0;i<k;i++){
            int x = operators[i][0];
            int y = operators[i][1];
            int count = 0;
            grid[x][y] = 1;
            vector<vector<int>> visited(n,vector<int>(m,0));
            
            for(int j=0;j<n;j++){
                for(int k=0;k<m;k++){
                    if(grid[j][k] == 1 && visited[j][k] == 0){
                        count++;
                        dfs(grid,visited,j,k);
                    }
                }
            }
            
            ans.push_back(count);
        }
        
        return ans;
    }
};
