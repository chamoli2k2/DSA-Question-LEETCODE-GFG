class Solution {
  private:
    void dfs(vector<vector<int>> &grid,vector<pair<int,int>> &vt,int i,int j,int bi,int bj){
        // base case
        if(i < 0 || j < 0 || i >= grid.size() || j >= grid[0].size() || grid[i][j] != 1){
            return;
        }
        
        grid[i][j] = -2;
        vt.push_back({bi-i,bj-j});
        
        // moving in all four direction
        dfs(grid,vt,i+1,j,bi,bj); // down
        dfs(grid,vt,i-1,j,bi,bj); // up
        dfs(grid,vt,i,j-1,bi,bj); // left
        dfs(grid,vt,i,j+1,bi,bj); // right
        
    }
  public:
    int countDistinctIslands(vector<vector<int>>& grid) {
        set<vector<pair<int,int>>> st;
        int n = grid.size();
        int m = grid[0].size();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    vector<pair<int,int>> vt;
                    dfs(grid,vt,i,j,i,j);
                    st.insert(vt);
                }
            }
        }
        
        return st.size();
    }
};
