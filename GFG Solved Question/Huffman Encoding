class Node{
    public:
    int data;
    Node* left;
    Node* right;
    
    // constructor
    Node(int d){
        data = d;
        left = NULL;
        right = NULL;
    }
};

class cmp{
    public:
    bool operator()(Node* a,Node* b){
        return a->data > b->data;
    }
};


class Solution
{
    private:
        void solve(Node* root,vector<string> &ans,string temp){
            // base case
            if(root->left == NULL && root->right == NULL){
                ans.push_back(temp);
                return;
            }
            
            // moving left adding zero to temp
            solve(root->left,ans,temp+'0');
            // moving right adding 1 to temp
            solve(root->right,ans,temp+'1');
        }
	public:
		vector<string> huffmanCodes(string S,vector<int> f,int N)
		{
		    // min heap
		    priority_queue<Node*,vector<Node*>,cmp> pq;
		    for(int i=0;i<N;i++){
		        Node* temp = new Node(f[i]);
		        pq.push(temp);
		    }
		    
		    // making the binary tree
		    while(pq.size() > 1){
		        Node* left = pq.top();
		        pq.pop();
		        Node* right = pq.top();
		        pq.pop();
		        Node* newNode = new Node(left->data + right->data);
		        // making new connections
		        newNode->left = left;
		        newNode->right = right;
		        pq.push(newNode);
		    }
		    Node* root = pq.top();
		    vector<string> ans;
		    solve(root,ans,"");
		    return ans;
		}
};
