class Solution {
  private:
    int timer = 1;
    void dfs(vector<int> adj[],vector<int> &visited,vector<int> &mark,int tin[],int low[],int node,int parent){
        // Base case
        visited[node] = 1;
        tin[node] = low[node] = timer;
        timer++;
        
        int child = 0;
        for(auto it : adj[node]){
            if(it == parent) continue;
            
            if(visited[it] == 0){
                dfs(adj,visited,mark,tin,low,it,node);
                low[node] = min(low[node],low[it]);
                
                if(low[it] >= tin[node] && parent != -1){
                    mark[node] = 1;
                }
                child++;
            }
            else{
                low[node] = min(low[node],tin[it]);
            }
        }
        
        if(child > 1 && parent == -1){
            mark[node] = 1;
        }
    }
  public:
    vector<int> articulationPoints(int V, vector<int>adj[]) {
        vector<int> visited(V,0);
        vector<int> mark(V,0);
        int tin[V], low[V];
        
        for(int i=0;i<V;i++){
            if(visited[i] == 0){
                dfs(adj,visited,mark,tin,low,i,-1);
            }
        }
        
        vector<int> ans;
        for(int i=0;i<V;i++){
            if(mark[i] == 1){
                ans.push_back(i);
            }
        }
        
        if(ans.size() == 0) return {-1};
        
        return ans;
    }
};
