class Solution {
  private:
    long long int solve(int s[],vector<vector<long long>> &dp,int idx,int target){
        // base case
        if(idx == 0){
            if(target % s[0] == 0){
                return 1;
            }
            
            return 0;
        }
        
        if(target == 0){
            return 1;
        }
        
        if(dp[idx][target] != -1){
            return dp[idx][target];
        }
        
        // take
        long long int take = 0;
        if(s[idx] <= target){
            take = solve(s,dp,idx,target-s[idx]);
        }
        
        long long int notTake = solve(s,dp,idx-1,target);
        
        dp[idx][target] = take + notTake;
        
        return dp[idx][target];
    }
  public:
    long long int count(int s[], int m, int n) {

        vector<vector<long long>> dp(m,vector<long long int>(n+1,-1));
        
        return solve(s,dp,m-1,n);
    }
};
