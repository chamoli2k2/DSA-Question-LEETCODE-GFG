Node* LCA(Node *root, int n1, int n2)
{
   // base case
   if(root == NULL){
       return NULL;
   }
   
   
   // if root->data is greater than both number than search in left part 
   if(root->data > n1 and root->data > n2){
       return LCA(root->left,n1,n2);
   }
   
   // if root->data is smaller than both number than search in right part
   if(root->data < n1 and root->data < n2){
       return LCA(root->right,n1,n2);
   }
   
   return root;
}

Approach 2 :
Node* LCA(Node *root, int n1, int n2)
{
  
  while(root != NULL){ 
        // if root->data is greater than both number than search in left part 
        if(root->data > n1 and root->data > n2){
            root = root->left;
        }else if(root->data < n1 and root->data < n2){// if root->data is smaller than both number than search in right part
            root = root->right;
        }else{
            return root;
        }
  }
}


Approach 3 :

Node* solve(Node* root,int n1,int n2){
    // base case
    if(root == NULL || root->data == n1 || root->data == n2){
        return root;
    }
    
    Node* left = solve(root->left,n1,n2);
    Node* right = solve(root->right,n1,n2);
    
    if(left == NULL){
        return right;
    }
    else if(right == NULL){
        return left;
    }
    
    return root;
}

Node* LCA(Node *root, int n1, int n2)
{
   if(root == NULL){
       return NULL;
   }
   
   return solve(root,n1,n2);
}
