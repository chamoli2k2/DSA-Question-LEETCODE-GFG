// Brute force approach
int find3Numbers(int A[], int arr_size, int sum)
{
    // Fix the first element as A[i]
    for (int i = 0; i < arr_size - 2; i++)
    {
 
        // Fix the second element as A[j]
        for (int j = i + 1; j < arr_size - 1; j++)
        {
 
            // Now look for the third number
            for (int k = j + 1; k < arr_size; k++)
            {
                if (A[i] + A[j] + A[k] == sum)
                {
                    /*cout << "Triplet is " << A[i] <<
                        ", " << A[j] << ", " << A[k];*/
                    return 1;
                }
            }
        }
    }
 
    // If we reach here, then no triplet was found
    return 0;
}


Optimised approach : Tc -> O(N2)
class Solution{
    public:
    //Function to find if there exists a triplet in the 
    //array A[] which sums up to X.
    bool find3Numbers(int a[], int n, int sum)
    {
        sort(a,a+n);
        for(int i=0;i<n-2;i++){
            int j=n-1;
            int k=i+1;
            while(k<j){
                if(a[i]+a[j]+a[k]==sum){
                    return  1;
                }else if(a[i]+a[j]+a[k]>sum){
                    j--;
                }else{
                    k++;
                }
            }
        }
        return 0;
    }

};
