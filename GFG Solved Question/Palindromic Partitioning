class Solution{
private:
    bool isPalindrome(string &s,int i,int j){
        while(i < j){
            if(s[i++] != s[j--]) return false;
        }
        return true;
    }
    int solve(string &s,int i,int j){
        // Base case
        if(i >= j || isPalindrome(s,i,j)) return 0;
        
        if(dp[i][j] != -1) return dp[i][j];
        
        int ans = INT_MAX;
        for(int k=i;k<j;k++){
            int left, right;
            // Checking left answer
            if(dp[i][k] != -1){
                left = dp[i][k];
            }
            else{
                left = solve(s,i,k);
            }
            // Checking right answer
            if(dp[k+1][j] != -1){
                right = dp[k+1][j];
            }
            else{
                right = solve(s,k+1,j);
            }
            
            ans = min(ans,1+left+right);
        }
        
        return dp[i][j] = ans;
    }
public:
    int dp[501][501];
    int palindromicPartition(string str)
    {
        int n = str.size();
        memset(dp,-1,sizeof(dp));
        return solve(str,0,n-1);
    }
};
