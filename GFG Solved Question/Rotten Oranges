class Solution 
{
    public:
    //Function to find minimum time required to rot all oranges. 
    int orangesRotting(vector<vector<int>>& grid) {
        // Finding the size of grid
        int n = grid.size();
        int m = grid[0].size();
        
        // Making visited array
        vector<vector<int>> visited(n,vector<int>(m,0));
        // Making queue  to store row , col , time
        queue<pair<pair<int,int>,int>> q;
        int fcount = 0;
        
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                
                // marking visited array 2 if found rotten orange
                if(grid[i][j] == 2){
                    visited[i][j] = 2;
                    q.push({{i,j},0});
                }
                
                // finding no of fresh orange
                if(grid[i][j] == 1){
                    fcount++;
                }
                
            }
        }
        
        // doing bfs traversal
        int dr[] = {-1,0,1,0};
        int dc[] = {0,1,0,-1};
        int tmax = 0;
        
        int count = 0;
        while(!q.empty()){
            int r = q.front().first.first;
            int c = q.front().first.second;
            int t = q.front().second;
            q.pop();
            tmax = max(tmax,t);
            
            for(int i=0;i<4;i++){
                int row = r + dr[i];
                int col = c + dc[i];
                // base case
                if(row >= 0 && col >= 0 && row < n && col < m && grid[row][col] == 1 && visited[row][col] != 2){
                    visited[row][col] = 2;
                    q.push({{row,col},t + 1});
                    count++;
                }
            }
        }
        
        // checking if all fresh orange got rotten or not
        if(fcount != count){
            return -1;
        }
        
        return tmax;
    }
};
