class Solution {
  private:
   void solve(long long int n ,long long &ans){
       long long int a = 1;
       long long int b = 1;
       if(n == 1 or n == 2){
           ans = 1;
           return;
       }
       
       int mod = 1e9 + 7;
       for(int i=2;i<n;i++){
           ans = (a + b) % mod;
           a = b;
           b = ans;
       }
   }
  public:
    long long int nthFibonacci(long long int n){
        long long ans = 0;
        solve(n,ans);
        return ans;
    }
};


Approach 2 : Recursive approach
class Solution {
  private:
    long long solve(long long int n ,vector<long long int> &dp){
       if(n <=1 ){
           dp[n] = n;
           return dp[n];
       }
       
       if(dp[n] != -1){
           return dp[n];
       }
       
       int mod = (1e9 + 7);
       dp[n] = (solve(n-1,dp) + solve(n-2,dp)) % mod;
       return dp[n];
   }
  public:
    long long int nthFibonacci(long long int n){
        vector<long long int> dp(n+1,-1);
        dp[1] = 1;
        solve(n,dp);
        return dp[n];
    }
};
