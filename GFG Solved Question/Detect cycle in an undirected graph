class Solution {
  private:
    bool check(vector<int> adj[],unordered_map<int,bool> &visited,int node,int parent){
        
        // marking the ith index true
        visited[node] = true;
        
        for(auto it : adj[node]){
            if(visited[it] == false){
                if(check(adj,visited,it,node)){
                    return true;
                }
            }else if(it != parent){
                return true;
            }
        }
        
        return false;
    } 
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int n, vector<int> adj[]) {
        
        // making the visited array
        unordered_map<int,bool> visited;
        
        int parent = -1;
        
        for(int i=0;i<n;i++){
            if(visited[i] == false){
                if(check(adj,visited,i,parent)){
                    return true;
                }
            }
        }
        
        return false;
    }
};
