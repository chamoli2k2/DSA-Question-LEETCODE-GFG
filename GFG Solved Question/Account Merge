class DisJointSet{
private:
    vector<int> size, parent;
public:
    // Constructor
    DisJointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    // Finding ulimate parent of node
    int findUPar(int node){
        // Finding Parent
        if(node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += ulp_v;
        }
    }
};
class Solution {
public:
    vector<vector<string>> accountsMerge(vector<vector<string>>& accounts) {
        int n = accounts.size();
        DisJointSet ds(n);
        unordered_map<string,int> mp;

        // Making disjoint set
        for(int i=0;i<n;i++){
            for(int j=1;j<accounts[i].size();j++){
                string account = accounts[i][j];
                if(mp.find(account) == mp.end()){
                    mp[account] = i;
                }
                else{
                    ds.unionBySize(i,mp[account]);
                }
            }
        }

        vector<string> mergeAccount[n];
        for(auto it : mp){
            string account = it.first;
            int node = ds.findUPar(it.second);
            mergeAccount[node].push_back(account);
        }

        vector<vector<string>> ans;
        for(int i=0;i<n;i++){
            if(mergeAccount[i].size() == 0) continue;
            vector<string> temp;
            temp.push_back(accounts[i][0]);
            sort(mergeAccount[i].begin(),mergeAccount[i].end());

            for(auto it : mergeAccount[i]){
                temp.push_back(it);
            }

            ans.push_back(temp);
        }

        return ans;
    }
};
