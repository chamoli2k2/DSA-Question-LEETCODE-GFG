// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;

 // } Driver Code Ends
class Solution{
    private:
    int solve(int coins[],vector<vector<int>> &dp,int n,int money){
        // base case 
        // if there is no one in array
        
        
        if(n <= 0){
            if(money % coins[0] == 0){
                return money/coins[0];
            }else{
                return 1e9;
            }
        }
        
        if(dp[n][money] != -1){
            return dp[n][money];
        }
        
        //  picking the element if coins denomination is less than money
        int pick = INT_MAX;
        
        if(coins[n] <= money){
            pick = 1 + solve(coins,dp,n,money-coins[n]);
        }
        
        int notPick = solve(coins,dp,n-1,money);
        
        dp[n][money] = min(pick,notPick);
        
        return dp[n][money];
    }
    
	public:
	int minCoins(int coins[], int n, int money) 
	{ 
	    //declaration of dynamic array
	    vector<vector<int>> dp(n,vector<int>(money+1,-1));
	   
	    int ans = solve(coins,dp,n-1,money);
	    
	    if(ans >= 1e9){
	        return -1;
	    }
	    
	    return ans;
	} 
	  
};

// { Driver Code Starts.
int main() 
{
   
   
   	int t;
    cin >> t;
    while (t--)
    {
        int v, m;
        cin >> v >> m;

        int coins[m];
        for(int i = 0; i < m; i++)
        	cin >> coins[i];

      
	    Solution ob;
	    cout << ob.minCoins(coins, m, v) << "\n";
	     
    }
    return 0;
}
  // } Driver Code Ends
