class Node{
    public:
    // Data members
    int data;
    Node* left;
    Node* right;
    
    // constructor
    Node(int key){
        this->data = key;
        this->left = NULL;
        this->right = NULL;
    }
};

Node* solve(vector<int> &nums,int s,int e){
    
    if(s > e){
        return NULL;
    }
    
    int mid = s + (e - s) / 2;
    
    Node* root = new Node(nums[mid]);
    
    // Recursively construct tree in left and right sub part
    root->left = solve(nums,s,mid-1);
    root->right = solve(nums,mid+1,e);
    
    return root;
}

void print(Node* root,vector<int> &ans){
    if(root == NULL){
        return;
    }
    
    ans.push_back(root->data);
    print(root->left,ans);
    print(root->right,ans);
}
class Solution {
public:
    vector<int> sortedArrayToBST(vector<int>& nums) {
        int n = nums.size();
        Node* root = solve(nums,0,n-1);
        vector<int> ans;
        print(root,ans);
        return ans;
    }
};
