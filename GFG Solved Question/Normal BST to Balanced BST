void solve(Node* root,vector<int> &ans){
    // base case
    if(root == NULL){
        return;
    }
    
    solve(root->left,ans);
    ans.push_back(root->data);
    solve(root->right,ans);
}
Node* makeBST(vector<int> ans,int start,int end){
    // base case
    if(start > end){
        return NULL;
    }
    
    // finding mid;
    int mid = (start+end)/2;
    
    Node* root = new Node(ans[mid]);
    
    root->left = makeBST(ans,start,mid-1);
    root->right = makeBST(ans,mid+1,end);
    
    return root;
}
Node* buildBalancedTree(Node* root)
{
	vector<int> ans;
	solve(root,ans);
	int start = 0;
	int end = ans.size()-1;
	Node* temp = makeBST(ans,start,end);
	return temp;
}
