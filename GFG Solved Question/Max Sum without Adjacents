class Solution{
private:
    int solve(int *arr,int n,vector<int> &dp){
        // base case
        if(n <= 0){
            return 0;
        }
        
        if(dp[n] != -1){
            return dp[n];
        }
        
        // picking the index element
        // here we do "n-2" because in question it is given that there should be no adjacent 
        // if we pick index "n-1" than we need to solve the same for index "n-2"
        int picking = arr[n-1] + solve(arr,n-2,dp);
        
        // not picking the index
        int not_picking = solve(arr,n-1,dp);
        
        dp[n] = max(picking,not_picking);
        
        return dp[n];
    }
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    vector<int> dp(n+1,-1);
	    return solve(arr,n,dp);
	}
};


Approach 2 : Tabulation approach with no space optimization
class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    
	    if(n == 0){
	        return 0;
	    }
	    
	    if(n == 1){
	        return arr[0];
	    }
	    
	    vector<int> dp(n,-1);
	    dp[0] = arr[0];
	    dp[1] = max(arr[0],arr[1]);
	    for(int i=2;i<n;i++){
	        // pick
	        int pick = arr[i] + dp[i-2];
	        
	        // not pick
	        int notPick = dp[i-1];
	        
	        dp[i] = max(pick,notPick);
	    }
	    return dp[n-1];
	}
};


Approach 3 : Tabulation approach with space optimization

class Solution{
public:	
	// calculate the maximum sum with out adjacent
	int findMaxSum(int *arr, int n) {
	    if(n == 0){
	        return 0;
	    }
	    
	    if(n == 1){
	        return arr[0];
	    }
	    
	    vector<int> dp(2,-1);
	    dp[0] = arr[0];
	    dp[1] = max(arr[0],arr[1]);
	    int current;
	    for(int i=2;i<n;i++){
	        // pick
	        int pick = arr[i] + dp[0];
	        
	        // not pick
	        int notPick = dp[1];
	        
	        current= max(pick,notPick);
	        
	        // updating the value of dp array
	        dp[0] = dp[1];
	        dp[1] = current;
	    }
	    return dp[1];
	}
};


