class Solution {
private:
    int solve(int left,int up,vector<vector<int>> &dp,vector<vector<int>> &grid){
        // base case
        // if left and up equal to 1 then it means that we reach destination
        if(left == 1 and up == 1){
            return 1;
        }
        
        // if left and up is less than "0" than it means we are out of matrix 
        if(left < 1 or up < 1 or grid[left][up] == 1){
            return 0;
        }
        
        //checking if answer is already there in dp matrix 
        if(dp[left][up] != -1){
            return dp[left][up];
        }
        
        int mod = 1e9 + 7;
        int ls,us;
        
        // going left 
        ls = solve(left-1,up,dp,grid) % mod;
        
        // going up
        us = solve(left,up-1,dp,grid) % mod;
        
        dp[left][up] = (ls + us) % mod;
        
        return dp[left][up];
    }
    
public:
	int FindWays(int n, int m, vector<vector<int>>blocked_cells){
	    // creating a dp matrix for memoziation
	    vector<vector<int>> dp(n+1,vector<int>(m+1,-1));
	    vector<vector<int>> grid(n+1,vector<int>(m+1,0));
	    
	    // making grid matrix and marking the index given in blocked cell as 1 
	    for(int i=0;i<blocked_cells.size();i++){
	        // taking index out from blocked cell
	        vector<int> v = blocked_cells[i];
	        int x = v[0];
	        int y = v[1];
	        // marking the coordinate as blocked
	        grid[x][y] = 1;
	    }
	    
	    // if the destionation is blocked then there is no way to reach the destionation
	    if(grid[n][m] == 1 or grid[1][1] == 1){
	        return 0;
	    }
	    
	    return solve(n,m,dp,grid);
	    
	}
};
