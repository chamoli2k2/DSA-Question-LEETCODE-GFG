class DisJointSet{
public:
    vector<int> size, parent;
    
    // Constructor
    DisJointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    // Finding ulimate parent of node
    int findUPar(int node){
        // Finding Parent
        if(node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += ulp_v;
        }
    }
};
class Solution {
  public:
    int Solve(int n, vector<vector<int>>& edge) {
        DisJointSet ds(n);
        int CntExtra = 0;
        
        for(auto it : edge){
            int u = it[0], v = it[1];
            if(ds.findUPar(u) == ds.findUPar(v)){
                CntExtra++;
            }
            else{
                ds.unionBySize(u,v);
            }
        }
        
        int noOfCmp = 0;
        for(int i=0;i<n;i++){
            if(ds.parent[i] == i) noOfCmp++;
        }
        
        return CntExtra >= noOfCmp-1 ? noOfCmp-1 : -1;
    }
};
