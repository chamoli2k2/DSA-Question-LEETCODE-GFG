class DisJointSet{
public:
    vector<int> size, parent;
    // Constructor
    DisJointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    // Finding ulimate parent of node
    int findUPar(int node){
        // Finding Parent
        if(node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
  public:
    int MaxConnection(vector<vector<int>>& grid) {
        int n = grid.size();
        DisJointSet ds(n*n);

        int ans = 1;
        // Creating Disjoint DS
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 0) continue;

                int dc[] = {-1,1,0,0};
                int dr[] = {0,0,1,-1};

                for(int k=0;k<4;k++){
                    int row = i + dr[k];
                    int col = j + dc[k];

                    if(row >= 0 && col >= 0 && row < n && col < n && grid[row][col] == 1){
                        int nodeNo = i * n + j;
                        int adjNodeNo = row * n + col;
                        ds.unionBySize(nodeNo,adjNodeNo);
                    }
                }
            }
        }

        // No checking 
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1) continue;

                int dc[] = {-1,1,0,0};
                int dr[] = {0,0,1,-1};
                int currAns = 1;
                set<int> UniqueComponent;

                for(int k=0;k<4;k++){
                    int row = i + dr[k];
                    int col = j + dc[k];

                    if(row >= 0 && col >= 0 && row < n && col < n && grid[row][col] == 1){
                        int adjNode = row * n + col;
                        UniqueComponent.insert(ds.findUPar(adjNode));
                    }
                }

                for(auto it : UniqueComponent){
                    currAns += ds.size[it];
                }
                
                ans = max(ans,currAns);
            }
        }

        for(int i=0;i<n*n;i++){
            ans = max(ans,ds.size[ds.findUPar(i)]);
        }

        return ans;
    }
};
