class Solution{   
public:
    int median(vector<vector<int>> &matrix, int r, int c){
        int mini = INT_MAX;
        int maxi = INT_MIN;
        
        // finding minimum in the matrix
        // finding maximum in the matrix
        for(int i=0;i<r;i++){
            mini = min(mini,matrix[i][0]);
            maxi = max(maxi,matrix[i][c-1]);
        }
        
        // we know median off the matrix will lie in range [mini,maxi]
        // let's try binary search to solve the problem
        
        int mid;
        int k = ((r * c) / 2);
        int ans = -1;
        
        while(mini <= maxi){
            mid = mini + (maxi - mini) / 2;
            int count = 0;
            for(int i=0;i<r;i++){
                count += upper_bound(matrix[i].begin(),matrix[i].end(),mid) - matrix[i].begin();
            }
            
            if(count > k){
                maxi = mid - 1;
            }
            else{
                mini = mid + 1;
            }
        }
        
        return mini;
    }
};
