// In this question 0 is also present that's why there is change in base case
// We have to take care all zero too in this 
// important  question
int mod = 1e9 + 7;
class Solution{
    private:
    int solve(int arr[],vector<vector<int>> &dp,int n,int sum){
        // base case 
        if(n == 0){
            if(sum == 0 && arr[0] == 0){
                return 2;
            }
            
            if(sum == 0 || arr[0] == sum){
                return 1;
            }
            
            return 0;
        }
        
        if(dp[n][sum] != -1){
            return dp[n][sum];
        }
        
        // now we have two option
        int take = 0;
        if(arr[n] <= sum){
            take = solve(arr,dp,n-1,sum-arr[n]);
        }
        
        int notTake = solve(arr,dp,n-1,sum);
        
        return dp[n][sum] = (take + notTake) % mod;
    }
	public:
	int perfectSum(int arr[], int n, int sum)
	{
        vector<vector<int>> dp(n,vector<int>(sum+1,-1));
        
        return solve(arr,dp,n-1,sum);
	}
	  
};
