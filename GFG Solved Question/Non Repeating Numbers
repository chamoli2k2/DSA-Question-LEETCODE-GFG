// Approach 1 : O(NlogN) -> Tc and O(1) -> SC

class Solution
{
public:
    vector<int> singleNumber(vector<int> nums) 
    {
        sort(nums.begin(),nums.end());
        int n=nums.size();
        vector<int> ans;
        int i=0;
        while(i<n){
            if(nums[i]!=nums[i+1]){
                ans.push_back(nums[i]);
                i++;
            }else{
                i=i+2;
            }
        }
        return ans;
    }
};

// Bit magic Approach
class Solution
{
public:
    vector<int> singleNumber(vector<int> nums) 
    {
        
        int n=nums.size();
        vector<int> ans;
        int XOR=nums[0];
        // step 1: taking xor of every number
        for(int i=1;i<nums.size();i++){
           XOR=XOR^nums[i]; 
        }
        
        // step 2: for(mula of finding rightmost set bit of a number
        int rightset_bit=XOR&(~(XOR-1));
        
        //segregating the number
        int x=0,y=0;
        for(int i=0;i<n;i++){
            if(nums[i]&rightset_bit){
                x=x^nums[i];
            }else{
                y=y^nums[i];
            }
        }
        ans.push_back(x);
        ans.push_back(y);
        sort(ans.begin(),ans.end());
        return ans;
    }
};
