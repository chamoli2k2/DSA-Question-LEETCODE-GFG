class Solution{
    private:
    void solve(vector<vector<int>> &m,vector<string> &ans,vector<vector<int>> &visited,string temp,int i,int j,int n){
        // base case
        if(i < 0 || j < 0 || i == n || j == n || visited[i][j] == true || m[i][j] == 0){
            return;
        }
        
        if(i == n-1 && j == n-1){
            ans.push_back(temp);
            return;
        }
        visited[i][j] = true;
        
        // moving to different positions
        solve(m,ans,visited,temp+'D',i+1,j,n); // Down
        solve(m,ans,visited,temp+'L',i,j-1,n); // left
        solve(m,ans,visited,temp+'R',i,j+1,n); // right
        solve(m,ans,visited,temp+'U',i-1,j,n); // Up
        
        // Backtracking marking unvisited
        visited[i][j] = false;
    }
    public:
    vector<string> findPath(vector<vector<int>> &m, int n) {
        vector<string> ans;
        vector<vector<int>> visited(n,vector<int>(n,0));
        if(m[0][0] == 0 || m[n-1][n-1] == 0){
            return ans;
        }
        
        string temp = "";
        
        solve(m,ans,visited,temp,0,0,n);
        return ans;
    }
};
