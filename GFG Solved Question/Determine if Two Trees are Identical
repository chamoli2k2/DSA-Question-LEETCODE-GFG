Approach 1 :

class Solution
{
    public:
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
        if(r1!=NULL and r2==NULL){
            return false;
        }
        
        if(r2!=NULL and r1==NULL){
            return false;
        }
        
        if(r1==NULL and r2==NULL){
            return true;
        }
        
        //post order traversal 
        bool left = isIdentical(r1->left,r2->left);
        bool right = isIdentical(r1->right,r2->right);
        bool val = r1->data == r2->data;
        
        if(left and right and val){
            return true;
        }else{
            return false;
        }
    }
};

Approach 2 : 

class Solution
{
    public:
    //Function to check if two trees are identical.
    bool isIdentical(Node *r1, Node *r2)
    {
        // base case
        
        // case 1 
        if(r1 == NULL and r2 == NULL){
            return true;
        }
        
        // case 2;
        if((r1 == NULL and r2 != NULL) || (r1 != NULL and r2 == NULL)){
            return false;
        }
        
        // preoreder traversal [N L R]
        if(r1->data == r2->data){
            isIdentical(r1->left,r2->left);
            isIdentical(r1->right,r2->right);
        }
        else{
            return false;
        }
    }
};
