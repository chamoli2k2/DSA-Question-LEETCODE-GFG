class Solution{
    public:
    int findSubString(string s)
    {
        set<char> st(s.begin(),s.end());
        string p(st.begin(),st.end());
       
        
        int n = s.size();
        int m = p.size();
        
        unordered_map<int,int> mp;
        int count = 0;
        for(int i=0;i<m;i++){
            mp[p[i]]++;
        }
        
        // Saving the size in count variable
        count = mp.size();
        int i = 0;
        int j = 0;
        int ans = INT_MAX;
        
        while(j < n){
            // if we find the element into map
            if(mp.find(s[j]) != mp.end()){
                // decreasing the count of element
                mp[s[j]]--;
                if(mp[s[j]] == 0){
                    count--;
                }
                
                // Checking if count is zero
                if(count == 0){
                    
                    // Removing extra element
                    while(i <= j && count == 0){
                        int len = j - i + 1;
                        ans = min(ans,len);
                        if(mp.find(s[i]) == mp.end()){
                            i++;
                        }
                        else{
                            mp[s[i]]++;
                            if(mp[s[i]] > 0){
                                count++;
                            }
                            i++;
                        }
                    }
                }
            }
            j++;
        }
        
        return ans; 
    }
};
