class Solution
{
    private:
    
    //  to store data in sorted order by using inorder 
    void solve(Node* root,vector<int> &ans){
        // base case
        if(root == NULL){
            return;
        }
        
        solve(root->left,ans);
        ans.push_back(root->data);
        solve(root->right,ans);
    }
    
    
    // for merging two sorted array
    vector<int> mergeArray(vector<int> arr1,vector<int> arr2){
        
        int i=0,j=0;
        int n1 = arr1.size();
        int n2 = arr2.size();
        vector<int> ans;
        while(i<n1 and j<n2){
            if(arr1[i] < arr2[j]){
                ans.push_back(arr1[i]);
                i++;
            }else{
                ans.push_back(arr2[j]);
                j++;
            }
        }
        
        while(j != n2){
            ans.push_back(arr2[j]);
            j++;
        }
                
        while(i != n1){
            ans.push_back(arr1[i]);
            i++;
        }
        
        return ans;
    }
    
    // forming bst form sorted array
    Node* bstBuilder(vector<int> &merge,int start,int end){
        // base case
        if(start > end){
            return NULL;
        }
        
        int mid = (start+end)/2;
        
        Node* temp = new Node(merge[mid]);
        temp->left = bstBuilder(merge,start,mid-1);
        temp->right = bstBuilder(merge,mid+1,end);
        
        return temp;
    }
    public:
    //Function to return a list of integers denoting the node 
    //values of both the BST in a sorted order.
    vector<int> merge(Node *root1, Node *root2)
    {
       // step 1 : merge both array;
       vector<int> arr1,arr2;
       solve(root1,arr1);
       solve(root2,arr2);

       vector<int> merge = mergeArray(arr1,arr2);
    //   int start = 0;
    //   int end = merge.size()-1;
    //   Node* ans = bstBuilder(merge,start,end);
    
       return merge;
    }
};
