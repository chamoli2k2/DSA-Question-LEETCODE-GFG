class Solution
{
    private:
    static bool cmp(pair<double,Item> &p1,pair<double,Item> &p2){
        return p1.first > p2.first;
    }
    
    public:
    //Function to get the maximum total value in the knapsack.
    double fractionalKnapsack(int W, Item arr[], int n)
    {
        vector<pair<double,Item>> v;
        for(int i=0;i<n;i++){
            double num = double(1.0 * arr[i].value / arr[i].weight);
            v.push_back({num,arr[i]});
        }
        
        sort(v.begin(),v.end(),cmp);
        double maxVal = 0;
        for(int i=0;i<n;i++){
            if(W > v[i].second.weight){
                maxVal += v[i].second.value;
                W -= v[i].second.weight;
            }
            else{
                maxVal += double(v[i].first * W);
                W = 0;
            }
        }
        
        return maxVal;
    }
        
};
