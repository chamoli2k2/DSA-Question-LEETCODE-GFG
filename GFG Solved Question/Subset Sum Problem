class Solution{   
public:
    bool isSubsetSum(vector<int>arr, int sum){
        int n = arr.size();
        int w = sum;
        
        // creating a tabelo 
        vector<vector<bool>> dp(n+1,vector<bool>(w+1,false));
         
        // initialising the dp array
        for(int i = 0;i<n+1;i++){
            dp[i][0] = true;
        }
        
        // In the code j -> sum and i -> array element
        for(int i=1;i<n+1;i++){
            for(int j=1;j<w+1;j++){
                if(arr[i-1] <= j){
                    dp[i][j] = dp[i-1][j-arr[i-1]] || dp[i-1][j];
                }else{
                    dp[i][j] = dp[i-1][j];
                }
            }
        }
        
        
        return dp[n][sum]; 
    }
};

Approach 2 : 
bool solve(vector<int> &arr,vector<vector<int>> &dp,int idx,int target){
    // base case
    if(target == 0){
        return true;
    }
    if(idx == 0){
        return (arr[0] == target);
    }
    
    // checking if element is there in dp array of not
    if(dp[idx][target] != -1){
        return dp[idx][target];
    }
    
    // picking element 
    bool pick = false;
    
    if(arr[idx] <= target){
         pick = solve(arr,dp,idx-1,target-arr[idx]);
    }
    
    // not picking element 
    bool notPick = solve(arr,dp,idx-1,target);
   
    dp[idx][target] = pick | notPick;
    
    return dp[idx][target];
}
bool subsetSumToK(int n, int k, vector<int> &arr) {
    vector<vector<int>> dp(n,vector<int>(k+1,-1));
    return solve(arr,dp,n-1,k);
}
