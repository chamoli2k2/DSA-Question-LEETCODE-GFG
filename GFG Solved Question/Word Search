class Solution {
private:
    bool dfs(vector<vector<char>> &board,string word,int i,int j,int idx){
        // base case
        if(idx >= word.size()){
            return true;
        }
        
        if(i >= board.size() || j >= board[0].size() || i < 0 || j < 0 || board[i][j] == '0'){
            return false;
        }
        
        // checking if idx is matched with word
        if(word[idx] != board[i][j]){
            return false;
        }
        
        char temp = board[i][j];
        board[i][j] = '0';
        
        // moving in direction
        bool ds = dfs(board,word,i+1,j,idx+1); // down
        bool us = dfs(board,word,i-1,j,idx+1); // up
        bool ls = dfs(board,word,i,j-1,idx+1); // left
        bool rs = dfs(board,word,i,j+1,idx+1); // right
        
        // backtracking
        board[i][j] = temp;
        
        return (ds || us || ls || rs);
    }
public:
    bool isWordExist(vector<vector<char>>& board, string word) {
        int n = board.size();
        int m = board[0].size();
        
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(dfs(board,word,i,j,0)){
                    return true;
                }
            }
        }
        
        return false;
    }
};
