class Solution {
public:
    int shortestPathLength(vector<vector<int>>& graph) {
        int ans = 0, n = graph.size(), finalState = (1 << n) - 1;
        queue<pair<int,pair<int,int>>> q;
        for(int i=0;i<n;i++){
            q.push({i,{0,(1<<i)}});
        }

        vector<vector<int>> visited(n,vector<int>(finalState+1,0));
        while(!q.empty()){
            int node = q.front().first;
            int state = q.front().second.second;
            int dist = q.front().second.first;
            q.pop();

            for(auto it : graph[node]){
                int newState = state | (1<<it);
                if(newState == finalState){
                    return dist + 1;
                }
                else if(visited[it][newState]){
                    continue;
                }
                else{
                    q.push({it,{dist+1,newState}});
                    visited[it][newState] = 1;
                }
            }
        }

        return 0;
    }
};
