// Memoization 

class Solution {
private:
    int solve(vector<int> &nums1,vector<int> &nums2,int prev,int idx,int n){
        // Base case
        if(idx == n) return 0;

        if(dp[idx][prev] != -1) return dp[idx][prev];

        int ans = 0;
        if(prev == 0){
            // Not take
            int c1 = solve(nums1,nums2,0,idx+1,n);

            // take
            int c2 = 1 + solve(nums1,nums2,1,idx+1,n);
            int c3 = 1 + solve(nums1,nums2,2,idx+1,n);
            
            ans = max({c1,c2,c3});
        }
        else{
            if(prev == 1){
                if(nums1[idx] >= nums1[idx-1]){
                    ans = max(ans,1 + solve(nums1,nums2,1,idx+1,n));
                }

                if(nums2[idx] >= nums1[idx-1]){
                    ans = max(ans,1 + solve(nums1,nums2,2,idx+1,n));
                }
            }
            else if(prev == 2){
                if(nums2[idx] >= nums2[idx-1]){
                    ans = max(ans,1 + solve(nums1,nums2,2,idx+1,n));
                }
                
                if(nums1[idx] >= nums2[idx-1]){
                    ans = max(ans,1 + solve(nums1,nums2,1,idx+1,n));
                } 
            }
        }

        return dp[idx][prev] = ans;
    }
public:
    int dp[100001][3];
    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
        memset(dp,-1,sizeof(dp));
        int n = nums1.size();
        return solve(nums1,nums2,0,0,n);
    }
};

// Tabulation 

class Solution {
public:
    int maxNonDecreasingLength(vector<int>& nums1, vector<int>& nums2) {
        int n = nums1.size(), ans = 1;
        vector<int> dp1(n,1), dp2(n,1);

        for(int i=1;i<n;i++){
            if(nums1[i] >= nums1[i-1]){
                dp1[i] = max(dp1[i],1+dp1[i-1]);
            }

            if(nums2[i] >= nums1[i-1]){
                dp2[i] = max(dp2[i],1+dp1[i-1]);
            }

            if(nums1[i] >= nums2[i-1]){
                dp1[i] = max(dp1[i],1+dp2[i-1]);
            }

            if(nums2[i] >= nums2[i-1]){
                dp2[i] = max(dp2[i],1+dp2[i-1]);
            }

            ans = max({dp1[i],dp2[i],ans});
        }

        return ans;
    }
};
