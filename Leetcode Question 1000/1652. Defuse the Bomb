class Solution {
private:
    vector<int> solveP(vector<int> &code,int k){
        int n = code.size(), sum = 0;
        vector<int> nums(n,0);
        // precomputing the sum of k elements
        for(int i=1;i<=k;i++){
            sum += code[i];
        }

        // for evaluating the sum where sliding window is linear
        for(int i=0;i<n;i++){
            int temp = code[i];
            nums[i] = sum;
            sum -= code[(i+1)%n];
            sum += code[(i+k+1)%n];
        }

        return nums;
    }
public:
    vector<int> decrypt(vector<int>& code, int k) {
        vector<int> ans;
        // case 1 : if k == 0
        if(k == 0){
            for(int i=0;i<code.size();i++) ans.push_back(0);
        }
        // case 2 : if k > 0
        else if(k > 0){
            ans = solveP(code,k);
        }
        // case 3 : if k < 0
        else{
            reverse(begin(code),end(code));
            ans = solveP(code,-1*k);
            reverse(begin(ans),end(ans));
        }

        return ans;
    }
};
