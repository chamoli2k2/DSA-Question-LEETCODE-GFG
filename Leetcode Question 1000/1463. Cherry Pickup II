class Solution {
private:
    // row for both robot will be same hence we use only one variable "i" for that 
    int solve(vector<vector<int>> &grid,vector<vector<vector<int>>> &dp,int i,int j1,int j2,int n,int m){
        
        // checking if Robot1 and Robot2 is out of bound or not
        if(j1 < 0 or j2 < 0 or j2 >= m or j1 >= m){
            // returning very low value such that this answer got neglected from final answer
            // as we need to find maximum answer that's why we are returning low value here
            return -1e8;
        }
        
        // base case
        if(i == n-1){
            // Robot1 and Robot2 are on same position than we need to include that answer only once.
            if(j1 == j2){
                return grid[i][j1];
            }
            // otherwise include both individual answers.
            else{
                int num = grid[i][j1] + grid [i][j2];
                return num;
            }
        }
        
        
        // checking if answer is already there in dp or not
        if(dp[i][j1][j2] != -1){
            return dp[i][j1][j2];
        }
        
        
        int maxi = INT_MIN;
        
        for(int dj1=-1;dj1<2;dj1++){
            for(int dj2=-1;dj2<2;dj2++){
                int val = 0;
                
                if(j1 == j2){
                    val = grid[i][j1];
                }else{
                    val = grid[i][j1] + grid[i][j2];
                }
                
                // calling function again or further evaluation
                val = val + solve(grid,dp,i+1,j1+dj1,j2+dj2,n,m);
                
                // finding maximum
                maxi = max(maxi,val);
            }
        } 
        
         // returning the value
         dp[i][j1][j2] = maxi;
            
         return dp[i][j1][j2];
    }
public:
    int cherryPickup(vector<vector<int>>& grid) {
        // step 1 : finding the row and col of grid
        int n = grid.size();
        int m = grid[0].size();
        
        // step 2 : creating dp vector (3D vector) dp[i][j][k]
        vector<vector<vector<int>>>dp(n, vector<vector<int>>(m, vector<int>(m, -1)));     
        
        // step 3 
        return solve(grid,dp,0,0,m-1,n,m);
    }
};


Approach 2 : Tabulation approach

int maximumChocolates(int r, int c, vector<vector<int>> &grid) {
    int n = grid.size();
    int m = grid[0].size();
    vector<vector<vector<int>>> dp(n,vector<vector<int>>(m,vector<int>(m,-1)));
    
    // base case 
    for(int j1=0;j1<m;j1++){
        for(int j2=0;j2<m;j2++){
            if(j1 == j2){
                dp[n-1][j1][j2] = grid[n-1][j1];
            }else{
                dp[n-1][j1][j2] = grid[n-1][j1] + grid[n-1][j2];
            }
        }
    }
    
    // calculation
    for(int i = n-2; i >= 0; i--){
        for(int j1 = 0; j1 < m; j1++){
            for(int j2 = 0; j2 < m; j2++){
                int maxi = -1e8;
                for(int dj1 = -1; dj1 < 2; dj1++){
                    for(int dj2 = -1; dj2 < 2; dj2++){
                        int value = 0;
                        if(j1 == j2){
                            value = grid[i][j1];
                        }else{
                            value = grid[i][j1] + grid[i][j2];
                        }
                        
                  if(j1+dj1 >= 0 and j1+dj1 < m and j2+dj2 >= 0 and j2+dj2 < m){
                            value = value + dp[i+1][j1+dj1][j2+dj2];
                        }else{
                            value = value - 1e8;
                        }
                        maxi = max(maxi,value);
                    }
                }
                dp[i][j1][j2] = maxi;
            }
        }
    }
    
    return dp[0][0][m-1];
}
