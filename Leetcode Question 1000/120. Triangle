class Solution {
private: 
    int solve(int i,int j,int n,vector<vector<int>> &dp,vector<vector<int>> &triangle){
        // base case 
        // if row equal to size of triangle matrix
        if(i == n){
            return 0;
        }
        
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        // going left 
        int left = triangle[i][j] + solve(i+1,j,n,dp,triangle);
        // going right
        int right = triangle[i][j] + solve(i+1,j+1,n,dp,triangle);
        
        // storing minimum from both path
        dp[i][j] = min(left,right);
        
        return dp[i][j];
    }
public:
    int minimumTotal(vector<vector<int>>& triangle) {
        
        int n = triangle.size();
        vector<vector<int>> dp(n,vector<int>(n,-1));
        return solve(0,0,n,dp,triangle);
    }
};
