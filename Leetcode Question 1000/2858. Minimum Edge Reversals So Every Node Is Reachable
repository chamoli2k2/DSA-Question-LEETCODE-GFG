class Solution {
private:
    int solve(unordered_map<int,list<int>> &adjList,vector<bool> &visited,int node){
        visited[node] = 1;

        int ans = 0;
        for(auto &it : adjList[node]){
            int k = abs(it);
            if(visited[k] == 0){
                ans += solve(adjList,visited,k) + (it < 0);
            }
        }

        return ans;
    }

    void reRoot(unordered_map<int,list<int>> &adjList,vector<int> &ans,int node,int parent,int flipedEdges){
        ans[node] = flipedEdges;

        for(auto &it : adjList[node]){
            int k = abs(it);
            if(k == parent) continue;
            
            int decide = (it > 0) ? 1 : -1;
            reRoot(adjList,ans,k,node,flipedEdges+decide);
        }
    }
public:
    vector<int> minEdgeReversals(int n, vector<vector<int>>& edges) {
        vector<int> ans(n,0);
        unordered_map<int,list<int>> adjList;
        for(auto &it : edges){
            adjList[it[0]].push_back(it[1]);
            adjList[it[1]].push_back(-it[0]);
        }

        vector<bool> visited(n,0);
        int flipedEdges = solve(adjList,visited,0);

        // We observed
        reRoot(adjList,ans,0,-1,flipedEdges);
        return ans;
    }
};
