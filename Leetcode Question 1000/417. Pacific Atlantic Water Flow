class Solution {
private:
    void dfs(vector<vector<int>> &heights,vector<vector<int>> &ocean,int i,int j,int n,int m,int prev){
        // base case
        // if out of bound
        if(i < 0 || j < 0 || i >= n || j >= m || ocean[i][j] || heights[i][j] < prev){
            return;
        }
        
        ocean[i][j] = 1;
        
        // going in all 4 direction to check
        dfs(heights,ocean,i+1,j,n,m,heights[i][j]); // down
        dfs(heights,ocean,i-1,j,n,m,heights[i][j]); // up
        dfs(heights,ocean,i,j-1,n,m,heights[i][j]); // left
        dfs(heights,ocean,i,j+1,n,m,heights[i][j]); // right
    }
public:
    vector<vector<int>> pacificAtlantic(vector<vector<int>>& heights) {
        int n = heights.size();
        int m = heights[0].size();
        
        vector<vector<int>> pacific(n,vector<int>(m,0));
        vector<vector<int>> atlantic(n,vector<int>(m,0));
        
        for(int i=0;i<m;i++){
            // marking the path for pacific
            dfs(heights,pacific,0,i,n,m,INT_MIN);
            
            // marking the path for atlantic
            dfs(heights,atlantic,n-1,i,n,m,INT_MIN);
        }
        
        for(int i=0;i<n;i++){
            // marking the path for pacific
            dfs(heights,pacific,i,0,n,m,INT_MIN);
            
            // marking the path for atlantic
            dfs(heights,atlantic,i,m-1,n,m,INT_MIN);
        }
        
        // Evaluating answer 
        vector<vector<int>> ans;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                vector<int> temp;
                if(pacific[i][j] && atlantic[i][j]){
                    temp.push_back(i);
                    temp.push_back(j);
                    ans.push_back(temp);
                }
            }
        }
        
        
        return ans;
    }
};
