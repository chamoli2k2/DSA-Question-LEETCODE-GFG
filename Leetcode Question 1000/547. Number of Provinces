class Solution {
private:
    void dfs(unordered_map<int,list<int>> &adj,vector<int> &visited,int node){
        visited[node] = 1;

        for(auto &it : adj[node]){
            if(visited[it] == 0){
                dfs(adj,visited,it);
            }
        }
    }
public:
    int findCircleNum(vector<vector<int>>& isConnected) {
        unordered_map<int,list<int>> adj;
        int n = isConnected.size();

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(i == j) continue;
                if(isConnected[i][j] == 1){
                    adj[i].push_back(j);
                }
            }
        }

        int ans = 0;
        vector<int> visited(n,0);

        for(int i=0;i<n;i++){
            if(visited[i] == 0){
                dfs(adj,visited,i);
                ans++;
            }
        }

        return ans;
    }
};
