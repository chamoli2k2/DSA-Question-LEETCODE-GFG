class Solution {
public:
    int count = 0;
    void solve(vector<long> &nums,int low,int mid,int high){
        int n = high - low + 1, i = low, j = mid + 1, idx = 0;
        vector<long> copy(n);

        while(i <= mid && j <= high){
            if(nums[i] <= nums[j]){
                copy[idx++] = nums[i++];
            }
            else{
                copy[idx++] = nums[j++];
            }
        }

        while(i <= mid){
            copy[idx++] = nums[i++];
        }

        while(j <= high){
            copy[idx++] = nums[j++];
        }

        idx = 0;
        for(int k=low;k<=high;k++){
            nums[k] = copy[idx++];
        }

    }

    void merge(vector<long> &nums,int l,int r,int lower,int upper){
        // Base case
        if(l >= r){
            return;
        }

        int mid = l + (r - l) / 2;
        merge(nums,l,mid,lower,upper);
        merge(nums,mid+1,r,lower,upper);

        int i = mid + 1, j = mid + 1;
		for (int k = l; k <= mid; k++) {
			while (i <= r && nums[i] - nums[k] < lower) i++;  
			while (j <= r && nums[j] - nums[k] <= upper) j++;
            
			count += j - i;
		}


        solve(nums,l,mid,r);
    }
    
    int countRangeSum(vector<int>& nums, int lower, int upper) {
        int n = nums.size();
        vector<long> prefixSum(n+1,0);

        for(int i = 0; i<nums.size(); i++){
            prefixSum[i+1] = nums[i] + prefixSum[i];
        }

        merge(prefixSum, 0, n, lower, upper);
        return count;
    }
};
