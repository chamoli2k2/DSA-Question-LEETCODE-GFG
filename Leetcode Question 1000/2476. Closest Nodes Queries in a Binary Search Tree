class Solution {
private:
    pair<int,int> find(int target){
        int s = 0, e = nums.size() - 1, ls = -1, rs = -1;
        while(s <= e){
            int mid = s + (e - s) / 2;

            if(nums[mid] == target){
                ls = target;
                rs = target;
                break;
            }
            else if(nums[mid] < target){
                ls = nums[mid];
                s = mid + 1;
                
            }
            else{
                rs = nums[mid];
                e = mid - 1;
            }
        }

        return {ls,rs};
    }

    // Function to find Inorder
    void preorder(TreeNode* root){
        // Base case
        if(root == NULL) return;

        preorder(root->left);
        nums.push_back(root->val);
        preorder(root->right);
    }
public:
    vector<int> nums;
    vector<vector<int>> closestNodes(TreeNode* root, vector<int>& queries) {
        vector<vector<int>> ans;
        preorder(root);

        for(auto &it : queries){
            int query = it;
            pair<int,int> k = find(query);
            ans.push_back({k.first,k.second});
        }

        return ans;
    }
};
