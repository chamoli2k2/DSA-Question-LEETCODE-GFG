/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    TreeNode* solve(vector<int> &arr,int s,int e){
        // Base case
        if(s > e){
            return NULL;
        }

        int mid = (s + e) / 2;
        TreeNode* root = new TreeNode(arr[mid]);
        
        // left
        root->left = solve(arr,s,mid-1);
        // right 
        root->right = solve(arr,mid+1,e);

        return root;
    }
public:
    TreeNode* sortedListToBST(ListNode* head) {
        vector<int> lit;
        while(head){
            lit.push_back(head->val);
            head = head->next;
        }

        int n = lit.size();
        int idx = n / 2;

        TreeNode* root = solve(lit,0,n-1);

        return root;
    }
};
