class MyCircularQueue {
public:
    int size;
    int n;
    int front;
    int rear;
    vector<int> q;
    
    MyCircularQueue(int k) {
        n = 0;
        size = k;
        front = 0;
        rear = 0;
        q.resize(k,0);
    }
    
    bool enQueue(int value) {
        if(isFull()){
            return 0;
        }
        int r = rear % size;
        rear++;
        n++;
        q[r] = value;
        return 1;
    }
    
    bool deQueue() {
        if(isEmpty()){
            return 0;
        }
        front++;
        n--;
        return 1;
    }
    
    int Front() {
        if(isEmpty()){
            return -1;
        }
        int f = front % size;
        return q[f];
    }
    
    int Rear() {
        if(isEmpty()){
            return -1;
        }
        int r = (rear - 1) % size;
        return q[r];
    }
    
    bool isEmpty() {
        return n == 0;
    }
    
    bool isFull() {
        return size == n;
    }
};
