class Solution {
private:
    bool helper(TreeNode* left,TreeNode* right){
        // if both left and right are NULL simultaneously than return true else false
        // base case
        if(left == NULL || right == NULL){
            return (left == right);
        }
        
        // checking data of both left and right subtree
        // if left data is equal to right data than check for futher tree else return false
        if(left->val == right->val){
            return (helper(left->right,right->left) & helper(left->left,right->right));
        }
        
        return false;
    }
public:
    bool isSymmetric(TreeNode* root) {
        // Checking if root is null , if yes than we return true 
        if(root == NULL){
            return true;
        }
        
        // calling helper function 
        return helper(root->left,root->right);
    }
};
