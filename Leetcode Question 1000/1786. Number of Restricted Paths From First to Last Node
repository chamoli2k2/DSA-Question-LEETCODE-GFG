class Solution {
private:
    int mod = 1e9 + 7, dp[20005];
    int dfs(vector<int> &dist,vector<vector<pair<int,int>>> &mp,int node,int n){
        // Base case
        if(node == n) return 1;

        if(dp[node] != -1) return dp[node];

        int ans = 0;
        for(auto it : mp[node]){
            int v = it.first;
            if(dist[node] > dist[v]){
                ans = (ans % mod + dfs(dist,mp,v,n) % mod) % mod;
            }
        }

        return dp[node] = ans;
    }
public:
    int countRestrictedPaths(int n, vector<vector<int>>& edges) {
        vector<vector<pair<int,int>>> mp(n+1);
        // Making the adjancy list
        for(auto it : edges){
            mp[it[0]].push_back({it[1],it[2]});
            mp[it[1]].push_back({it[0],it[2]});
        }

        // Creating the distance array
        vector<int> dist(n+1,INT_MAX);
        priority_queue<pair<int,int>> pq;
        pq.push({0,n});
        dist[n] = 0;

        while(!pq.empty()){
            int di = -pq.top().first;
            int node = pq.top().second;
            pq.pop();

            for(auto it : mp[node]){
                int v = it.first, d = it.second;
                if(di+d < dist[v]){
                    dist[v] = di + d;
                    pq.push({-(di+d),v});
                }
            }
        }

        memset(dp,-1,sizeof(dp));

        return dfs(dist,mp,1,n);
    }
};
