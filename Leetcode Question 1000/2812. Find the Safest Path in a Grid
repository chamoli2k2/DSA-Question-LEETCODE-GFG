class Solution {
public:
    int maximumSafenessFactor(vector<vector<int>>& grid) {
        int n = size(grid), m = size(grid[0]), ans = INT_MAX;
        if(grid[0][0] == 1 || grid[n-1][n-1] == 1) return 0;
        
        int visited[401][401] = {0};
        vector<vector<int>> dist(n,vector<int>(m,INT_MAX));
        
        queue<pair<int,int>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1){
                    q.push({i,j});
                    dist[i][j] = 0;
                }
            }
        }
        
        
        int dirx[] = {0,0,-1,1};
        int diry[] = {1,-1,0,0};
        
        while(!q.empty()){
            int x = q.front().first;
            int y = q.front().second;
            q.pop();
            
            for(int k=0;k<4;k++){
                int i = x + dirx[k];
                int j = y + diry[k];
                
                if(i >= 0 && j >= 0 && j < n && i < n && dist[i][j] > dist[x][y] + 1){
                    q.push({i,j});
                    dist[i][j] = dist[x][y] + 1;
                }
            }
        }
        
        priority_queue<pair<int,pair<int,int>>> pq;
        pq.push({dist[0][0],{0,0}});
        visited[0][0] = 1;
        
        while(!pq.empty()){
            int curr = pq.top().first;
            int x = pq.top().second.first;
            int y = pq.top().second.second;
            pq.pop();
            ans = min(ans,curr);
            
            if(x == n-1 && y == n-1){
                break;
            }
            
            for(int k=0;k<4;k++){
                int i = x + dirx[k];
                int j = y + diry[k];
                if(i >= 0 && j >= 0 && j < n && i < n && visited[i][j] == 0){
                    // Always remember to mark visited to next node in bfs
                    visited[i][j] = 1;
                    pq.push({dist[i][j],{i,j}});
                }
            }
        }
        
        return ans;
    }
};
