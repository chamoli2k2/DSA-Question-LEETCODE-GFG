class Solution {
private:
    int solve(vector<vector<int>>& matrix,vector<vector<int>>& dp,int i,int j,int n){
        // base case 
        // if row == n than we are out of bound than we have to return back
        if(i == n){
            return 0;
        }
        
        // checking if our column and row index is not out of bound
		// and we are returning 1e9 because this solution is not valid as it is out of bound hence if we return high
		// value it automatically got neglected in later stage .
        if(j < 0 or j >= n){
            return 1e9;
        }
        
        // checking if we already have answer in dp or not
        if(dp[i][j] != -1){
            return dp[i][j];
        }
        
        // going left side
        int left = matrix[i][j] + solve(matrix,dp,i+1,j-1,n);
        
        // going bottom side
        int bottom = matrix[i][j] + solve(matrix,dp,i+1,j,n);
        
        // going right side
        int right = matrix[i][j] + solve(matrix,dp,i+1,j+1,n);
        
        // storing min of all three answers in dp vector after computing all path
        dp[i][j] = min(min(left,right),bottom);
        
        return dp[i][j];
        
    }
public:
    int minFallingPathSum(vector<vector<int>>& matrix) {
        // Step 1 : finding the size of matrix
        int n = matrix.size();
        // step 2 : Declaration of Dp vector of matrix size as we assumed indexing from 0
        vector<vector<int>> dp(n,vector<int>(n,-1));
        // step 3 : declaration of mini variable to store final answer
        int mini = INT_MAX;
        // step 4 : running the loop from top row with different starting point and finding the minimum one
        for(int i=0;i<n;i++){
            mini = min(mini,solve(matrix,dp,0,i,n));
        }
        
        return mini;
    }
};
