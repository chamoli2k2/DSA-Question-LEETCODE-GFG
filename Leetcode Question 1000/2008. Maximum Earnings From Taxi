class Solution {
private:
    static bool cmp(vector<int> &v1,vector<int> &v2){
        return v1[0] < v2[0];
    }

    int lowerBound(vector<vector<int>> &nums,int idx,int target){
        int s = idx, e = nums.size()-1, mid, ans = e + 1;
        
        while(s <= e){
            mid = s + (e - s) / 2;

            if(target <= nums[mid][0]){
                ans = mid;
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return ans;
    }

    long long solve(vector<vector<int>> &nums,int idx){
        // Base case
        if(idx >= nums.size()) return 0;

        if(dp[idx] != -1) return dp[idx];

        long long take = 1LL*(nums[idx][1] - nums[idx][0] + nums[idx][2]);
        int k = lowerBound(nums,idx+1,nums[idx][1]);
        take += solve(nums,k);

        long long notTake = solve(nums,idx+1);

        return dp[idx] = max(take,notTake);
    }
public:
    long long dp[100001];
    long long maxTaxiEarnings(int n, vector<vector<int>>& rides) {
        sort(begin(rides),end(rides),cmp);
        memset(dp,-1,sizeof(dp));
        return solve(rides,0);
    }
};
