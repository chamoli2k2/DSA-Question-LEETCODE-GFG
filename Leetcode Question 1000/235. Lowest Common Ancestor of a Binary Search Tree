// If this helps plz consider upvote :)
 
class Solution {
public:
    TreeNode* lowestCommonAncestor(TreeNode* root, TreeNode* p, TreeNode* q) {
        // Logic is simple 
        // first point where we can't able to determine whether node is on left or right part of tree is the our LCA
        if(root == NULL){
            return NULL;
        }
        
        int curr = root->val;
        
        // curr value is less than value of both q and p go on right sub tree
        if(curr < p->val && curr < q->val){
            return lowestCommonAncestor(root->right,p,q);
        }
        
        // curr value is greater than both q and p then search on left sub tree;
        if(curr > p->val && curr > q->val){
            return lowestCommonAncestor(root->left,p,q);
        }
        
        
        return root;
    }
};

 // If this helps plz consider upvote :)
