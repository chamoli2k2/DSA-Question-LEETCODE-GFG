#include <bits/stdc++.h> 

class Node{
    public:
    Node* links[26];
    int cntEndWith = 0, cntPrefix = 0;

    // Checking if there exist key
    bool containKey(char ch){
        return links[ch-'a'] != NULL;
    }

    // Put method to insert word in the reference of current node
    void put(char ch,Node* node){
        links[ch-'a'] = node;
    }

    // Moving next 
    Node* get(char ch){
        return links[ch-'a'];
    }  

    // Increasing the prefix
    void increasePrefix(){
        cntPrefix++;
    }

    // Increasing the word count
    void increaseWord(){
        cntEndWith++;
    }

    // Reducing the prefix
    void reducePrefix(){
        cntPrefix--;
    }

    // Deleting the word
    void reduceWord(){
        cntEndWith--;
    }

    // No of word
    int wordCnt(){
        return cntEndWith;
    }

    // No of prefix
    int prefixCnt(){
        return cntPrefix;
    }

};

class Trie{
    private:
    Node* root;
    public:

    Trie(){
        root = new Node();
    }

    void insert(string &word){
        int n = word.size();
        Node* node = root;
        for(int i=0;i<n;i++){
            // Checking if current character already in Trie
            if(node->containKey(word[i]) == false){
                node->put(word[i],new Node());
            }
            // Moving next
            node = node->get(word[i]);
            
            // Increasing the prefix
            node->increasePrefix();
        }

        // In the end setting the word cntEnd
        node->increaseWord();
    }

    int countWordsEqualTo(string &word){
        int n = word.size();
        Node* node = root;
        for(int i=0;i<n;i++){
            // Checking if current character exist or not
            if(node->containKey(word[i]) == false){
                return 0;
            }
            // If it exist then moving to next refernce pointer
            node = node->get(word[i]);
        }

        // In the end if we find the entire word we can simply return
        return node->wordCnt();
    }

    int countWordsStartingWith(string &word){
        int n = word.size();
        Node* node = root;
        for(int i=0;i<n;i++){
            // Checking if current character exist or not
            if(node->containKey(word[i]) == false){
                return 0;
            }
            // If it exist then moving to next refernce pointer
            node = node->get(word[i]);
        }
        
        // If we reach the 
        return node->prefixCnt();
    }

    void erase(string &word){
        int n = word.size();
        Node* node = root;
        for(int i=0;i<n;i++){
            // If it exist then moving to next refernce pointer
            node = node->get(word[i]);
            // Decrementing the Prefix count
            node->reducePrefix();
        }
        
        // Deleting the word
        node->reduceWord();
    }
};
