class Solution {
public:
    long long maximumSubarraySum(vector<int>& nums, int k) {
        // Base case
        if(nums.size() < k){
            return 0;
        }
        
        unordered_map<int,int> mp;
        long long sum = 0;
        long long ans = 0;
        for(int i=0;i<k;i++){
            mp[nums[i]]++;
            sum += nums[i];
        }
        
        if(mp.size() == k){
            ans = sum;
        }
        
        for(int i=k;i<nums.size();i++){
            mp[nums[i-k]]--;
            sum -= nums[i-k];
            // checking
            if(mp[nums[i-k]] == 0){
                mp.erase(nums[i-k]);
            }
            
            // adding the new sum
            sum += nums[i];
            mp[nums[i]]++;
            
            // checking if size is equal to k
            if(mp.size() == k){
                ans = max(sum,ans);
            }
        }
        
        return ans;
    }
};
