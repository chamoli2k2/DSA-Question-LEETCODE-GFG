class Solution {
private:
    int find(int d,int n1,vector<int> &ini){
        for(int i=0;i<n1;i++){
            if(ini[i]==d){
                return i;
            }
        }
        return -1;
    }
    TreeNode* solve(vector<int> &in,vector<int> &post,int n,int &postOrderIndex,int stin,int edin){
        if(postOrderIndex<0 or stin>edin){
            return NULL;
        }
        
        int data = post[postOrderIndex--];
        int position = find(data,n,in);
        
        TreeNode* root = new TreeNode(data);
        
        // right call
        root->right = solve(in,post,n,postOrderIndex,position+1,edin);
        
        // left call
        root->left = solve(in,post,n,postOrderIndex,stin,position-1);
        
        
        return root; 
    }
public:
    TreeNode* buildTree(vector<int>& in, vector<int>& post) {
        TreeNode* ans;
        int n = in.size();
        int postOrderIndex = n-1;
        ans = solve(in,post,n,postOrderIndex,0,n-1);
        return ans;
    }
};
