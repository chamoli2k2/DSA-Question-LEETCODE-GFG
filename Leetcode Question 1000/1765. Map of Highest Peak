class Solution {
public:
    vector<vector<int>> highestPeak(vector<vector<int>>& isWater) {
        int n = isWater.size(), m = isWater[0].size();
        vector<vector<int>> ans(n,vector<int>(m,INT_MAX));

        // Traversing the array and finding the water
        queue<pair<int,pair<int,int>>> q;
        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(isWater[i][j] == 1){
                    ans[i][j] = 0;
                    q.push({0,{i,j}});
                }
            }
        }

        // Declaring the directions
        int row[] = {0,0,-1,1};
        int col[] = {-1,1,0,0};

        while(!q.empty()){
            int dist = q.front().first;
            int i = q.front().second.first, j = q.front().second.second;
            q.pop();

            for(int k=0;k<4;k++){
                int r = i + row[k];
                int c = j + col[k];

                if(r >= 0 && c >= 0 && r < n && c < m && ans[r][c] > dist+1){
                    ans[r][c] = dist + 1;
                    q.push({dist+1,{r,c}});
                }
            }
        }

        return ans;
    }
};
