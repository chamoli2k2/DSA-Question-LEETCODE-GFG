class Solution {
private:
    int dfs(vector<vector<int>> &grid,vector<vector<int>> &visited,int i,int j,int n,int m){
        // Base case
        if(i < 0 || j < 0 || i >= n || j >= m || visited[i][j] == 1 || grid[i][j] == 0){
            return 0;
        }

        visited[i][j] = 1;
        
        // moving
        int c1 = dfs(grid,visited,i-1,j,n,m);
        int c2 = dfs(grid,visited,i+1,j,n,m);
        int c3 = dfs(grid,visited,i,j-1,n,m);
        int c4 = dfs(grid,visited,i,j+1,n,m);

        return grid[i][j] + c1 + c2 + c3 + c4;
    }
public:
    int findMaxFish(vector<vector<int>>& grid) {
        int n = size(grid), m = size(grid[0]), ans = 0;
        vector<vector<int>> visited(n,vector<int>(m,0));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(visited[i][j] == 0){
                    ans = max(dfs(grid,visited,i,j,n,m),ans);
                }
            }
        }

        return ans;
    }
};
