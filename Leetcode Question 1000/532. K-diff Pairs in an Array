// Solution : Tc -> O(nlogn)
class Solution {
private:  
    bool BS(vector<int> &nums,int i,int k){
        int s = 0, e = i - 1;
        while(s <= e){
            int mid = s + (e - s) / 2;
            if(nums[mid] == k){
                return true;
            }
            else if(nums[mid] > k){
                e = mid - 1;
            }
            else{
                s = mid + 1;
            }
        }

        return false;
    }
public:
    int findPairs(vector<int>& nums, int k) {
        sort(begin(nums),end(nums));
        int n = size(nums), ans = 0;
        set<int> mp;

        for(int i=1;i<n;i++){
            int k1 = nums[i] - k;
            bool found = BS(nums,i,k1);
            if(found){
                mp.insert(nums[i]);
            }
        }

        return mp.size();
    }
};


// Solution O(N)

class Solution {
public:
    int findPairs(vector<int>& nums, int k) {
        unordered_map<int,int> mp;
        set<int> st;
        for(auto it : nums) mp[it]++;
        int ans = 0;

        for(int i=0;i<nums.size();i++){
            int t = nums[i] + k;
            if(k == 0 && mp[t] > 1){
                st.insert(nums[i]);
            }
            else if(mp[t] > 0 && k != 0){
                st.insert(nums[i]);
            }
        }

        return st.size();
    }
};
