class Solution {
public:
    vector<vector<int>> zigzagLevelOrder(TreeNode* root) {
        vector<vector<int>> ans;
        // base case
        if(root == NULL){
            return ans;
        }
        
        queue<TreeNode*> q;
        q.push(root);
        
        // Algorithm is basic 90 % similar to how we print things in lvl order traversal 
        // Just in this we need to manage a extra variable to keep track in which direction we are moving
        bool leftToright = true;
        
        while(!q.empty()){
            int n = q.size();
            
            vector<int> row(n);
            for(int i=0;i<n;i++){
                TreeNode* temp = q.front();
                q.pop();
                
                int idx = leftToright ? i : n - 1 - i;
                
                row[idx] = temp->val;
                
                //checking left child
                if(temp->left){
                    q.push(temp->left);
                }
                
                // checking right child
                if(temp->right){
                    q.push(temp->right);
                }
            }
            
            // Changing direction
            leftToright = !leftToright;
            
            ans.push_back(row);
        }
        
        return ans;
    }
};
