class Solution {
private:
    bool check(string &s,int idx,int n){
        // Base case
        if(idx == n) return true;

        if(dp[idx] != -1) return dp[idx];

        string k = "";
        for(int j=idx;j<n;j++){
            k += s[j];
            if(mp[k]){
                if(check(s,j+1,n)){
                    return dp[idx] = true;
                }
            }
        }

        return dp[idx] = false;
    }
public:
    unordered_map<string,int> mp;
    int dp[301];
    bool wordBreak(string s, vector<string>& wordDict) {
        int n = size(s);
        memset(dp,-1,sizeof(dp));
        for(auto it : wordDict) mp[it]++;

        string temp = "";
        for(int i=0;i<n;i++){
            temp += s[i];
            if(mp[temp]){
                if(check(s,i+1,n)){
                    return true;
                }
            }
        }

        return false;
    }
};
