class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int pdtl = 1;
        int pdtr = 1;
        int n = nums.size();
        vector<int> left(n,0);
        vector<int> right(n,0);

        for(int i=0;i<n;i++){
            pdtl *= nums[i];
            pdtr *= nums[n-1-i];

            left[i] = pdtl;
            right[n-1-i] = pdtr;
        }

        vector<int> ans(n,0);
        // boundary case
        ans[0] = right[1];
        ans[n-1] = left[n-2];

        for(int i=1;i<n-1;i++){
            ans[i] = left[i-1] * right[i+1];
        }

        return ans;
    }
};


// Brute Force

class Solution {
public:
    vector<int> productExceptSelf(vector<int>& nums) {
        int n = nums.size();
        vector<int> ans;
        int pdt = 1;
        int pdt0 = 1;
        int count = 0;

        for(int i=0;i<n;i++){
            pdt = pdt * nums[i];
            if(nums[i] != 0){
                pdt0 = pdt0 * nums[i];
            }

            if(nums[i] == 0) count++;
        }

        for(int i=0;i<n;i++){
            if(nums[i] == 0 && count == 1){
                ans.push_back(pdt0);
            }
            else if(count > 1 && nums[i] == 0){
                ans.push_back(0);
            }
            else{
                ans.push_back(pdt/nums[i]);
            }
        }

        return ans;
    }
};
