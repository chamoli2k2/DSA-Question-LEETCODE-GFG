class Solution {
private:
    void dfs(vector<vector<char>> &grid,int i,int j,int row,int col){
        
        // checking if current position is out of bound or is already visited or we are water
        if(i >= row or i < 0 or j >= col or j < 0 or grid[i][j] != '1'){
            return ;
        }
        
        // if above codition doesn't excute means we are on valid land so mark it as visited 
        grid[i][j] = '2';
        
        // now call function to check all around is there is land or not
        
        dfs(grid,i+1,j,row,col); // Up
        dfs(grid,i-1,j,row,col); // down
        dfs(grid,i,j+1,row,col); // right
        dfs(grid,i,j-1,row,col); // left
        
    }
public:
    int numIslands(vector<vector<char>>& grid) {
        // finding number of row and col
        int row = grid.size();
        int col = grid[0].size();
        
        // no of Island 
        int noOfIsland = 0;
        
        // grid[i][j] = 1 -> land
        // grid[i][j] = 0 -> water
        // grid[i][j] = 2 -> visited land
        
        for(int i=0;i<row;i++){
            for(int j=0;j<col;j++){
                // if we found land mean grid[i][j] == 1
                
                if(grid[i][j] == '1'){
                    dfs(grid,i,j,row,col);
                    noOfIsland++;
                }
            }
        }
        
        return noOfIsland;
    }
}; 
