class Solution {
private:
    int solve(vector<int> &nums,vector<vector<int>> &dp,int target,int idx){
        // Base case
        if(target == 0) return 0;

        if(idx >= nums.size()){
            return target == 0 ? 0 : 1e6;
        }

        if(dp[idx][target] != -1) return dp[idx][target];

        int pick = 1e6;
        if(nums[idx] <= target){
            int c1 = 1 + solve(nums,dp,target-nums[idx],idx+1);
            int c2 = 1 + solve(nums,dp,target-nums[idx],idx);
            pick = min(c1,c2);
        }

        int notPick = solve(nums,dp,target,idx+1);

        return dp[idx][target] = min(pick,notPick);
    }
public:
    int minimumNumbers(int num, int k) {
        // Base case
        if(num == 0) return 0;
        if(k == 0 && num % 10 == 0) return 1;
        if(k == 0 && num % 10 != 0) return -1;
    
        vector<int> arr;
        int temp = k;
        while(temp <= num){
            arr.push_back(temp);
            temp += 10;
        }

        int n = arr.size();
        vector<vector<int>> dp(n,vector<int>(num+1,-1));
        int ans = solve(arr,dp,num,0);

        return ans == 1e6 ? -1 : ans;
    }
};
