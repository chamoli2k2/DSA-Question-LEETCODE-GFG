class Solution {
private:
    int dfs(vector<vector<int>> &grid,vector<vector<int>> &visited,int i,int j){
        // base case
        if(i >= grid.size() || i < 0 || j >= grid[0].size() || j < 0 || visited[i][j] == 1 || grid[i][j] == 0){
            return 0;
        }

        // Marking visited
        visited[i][j] = 1;

        return 1 + dfs(grid,visited,i-1,j) + dfs(grid,visited,i+1,j) + dfs(grid,visited,i,j-1) + dfs(grid,visited,i,j+1);
    }
public:
    int maxAreaOfIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        int m = grid[0].size();
        int ans = 0;
        vector<vector<int>> visited(n,vector<int>(m,-1));

        for(int i=0;i<n;i++){
            for(int j=0;j<m;j++){
                if(grid[i][j] == 1 && visited[i][j] == -1){
                    int k = dfs(grid,visited,i,j);
                    ans = max(ans,k);
                }
            }
        }
        return ans;
    }
};
