/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
private:
    pair<int,int> solve(TreeNode* root){
        // Base case
        if(root == NULL) return {-1001,0};

        auto ls = solve(root->left);
        auto rs = solve(root->right);
        int len1 = 0, len2 = 0;
        if(root->val == ls.first){
            len1 += ls.second + 1;
        }
        if(root->val == rs.first){
            len2 += rs.second + 1;
        }

        ans = max(ans,len1+len2);

        return {root->val,max(len1,len2)};
    }
public:
    int ans = 0;
    int longestUnivaluePath(TreeNode* root) {
        // base case
        solve(root);
        return ans;
    }
};
