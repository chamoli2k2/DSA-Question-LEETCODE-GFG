class Solution {
private:
    void solve(unordered_map<int,list<int>> &mp,vector<int> &visited,vector<int> &dfsVisited,vector<int> &distNode,int node,int &ans,int dist){
        visited[node] = 1;
        dfsVisited[node] = 1;
        distNode[node] = dist;

        for(auto it : mp[node]){
            if(visited[it] == 0){
                solve(mp,visited,dfsVisited,distNode,it,ans,dist+1);
            }
            else if(dfsVisited[it] == 1){
                ans = max(ans,dist-distNode[it]+1);
            }
        }

        dfsVisited[node] = 0;
    }
public:
    int len = 0;
    int longestCycle(vector<int>& edges) {
        int n = edges.size();
        unordered_map<int,list<int>> mp;
        // creating adjancy
        for(int i=0;i<edges.size();i++){
            if(edges[i] != -1){
                mp[i].push_back(edges[i]);
            }
        }
        
        vector<int> visited(n,0), dfsVisited(n,0), distNode(n,0);
        int ans = -1;
        for(int i=0;i<n;i++){
            if(visited[i] == 0){
                solve(mp,visited,dfsVisited,distNode,i,ans,0);
            }
        }

        return ans;
    }
};
