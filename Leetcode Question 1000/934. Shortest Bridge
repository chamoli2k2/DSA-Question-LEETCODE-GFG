class Solution {
private:
    void dfs(vector<vector<int>> &grid,int i,int j,int n){
        // Base case
        if(i < 0 || j < 0 || j >= n || i >= n || grid[i][j] == 0 || grid[i][j] == -1){
            return;
        }

        grid[i][j] = -1;

        dfs(grid,i-1,j,n);
        dfs(grid,i+1,j,n);
        dfs(grid,i,j-1,n);
        dfs(grid,i,j+1,n);
    }
public:
    int shortestBridge(vector<vector<int>>& grid) {
        int n = size(grid);
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == 1){
                    dfs(grid,i,j,n);
                    goto h;
                }
            }
        }
        h:;

         int mini = INT_MAX;
        queue<pair<pair<int,int>,int>> q;
        vector<vector<int>> visited(n,vector<int>(n,INT_MAX));

        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                if(grid[i][j] == -1){
                    q.push({{i,j},0});
                    visited[i][j] = 0;
                }
            }
        }

        int row[] = {-1,1,0,0};
        int col[] = {0,0,-1,1};

        while(!q.empty()){
            int m = q.size();
            for(int i=0;i<m;i++){
                int r = q.front().first.first;
                int c = q.front().first.second;
                int dist = q.front().second;
                q.pop();

                // Base case
                if(grid[r][c] == 1){
                    mini = min(mini,dist);
                    continue;
                }

                for(int j=0;j<4;j++){
                    int rs = r + row[j];
                    int cs = c + col[j];

                    if(rs >= 0 && cs >= 0 && rs < n && cs < n && visited[rs][cs] > dist+1){
                        q.push({{rs,cs},dist+1});
                        visited[rs][cs] = dist + 1;
                    }
                }
            }
        }

        return mini - 1;
    }
};
