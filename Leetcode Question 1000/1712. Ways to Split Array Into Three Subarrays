class Solution {
public:
    int waysToSplit(vector<int>& nums) {
        int n = nums.size(), i = 0, j = 2, ans = 0, mod = 1e9 + 7;
        vector<long long> arr(n);
        arr[0] = nums[0];

        for(int i=1;i<n;i++){
            arr[i] = arr[i-1] + nums[i];
        }

        for(int i=0;i<n;i++){
            int s = i + 1, e = n - 2, mid, left = -1, right = -1;

            // searching the left most index of mid
            while(s <= e){
                mid = s + (e - s) / 2;
                if(arr[i] <= arr[mid] - arr[i]){
                    left = mid;
                    e = mid - 1;
                }
                else{
                    s = mid + 1;
                }
            }

            s = i + 1, e = n - 2;
            // searching for rightmost index
            while(s <= e){
                mid = s + (e - s) / 2;
                if(arr[mid]-arr[i] <= arr[n-1]-arr[mid]){
                    right = mid;
                    s = mid + 1;
                }
                else{
                    e = mid - 1;
                }
            }

            if(left == -1 || right == -1 || left > right) continue;

            ans = (ans % mod + (right - left + 1) % mod) % mod;
        }

        return ans;
    }
};
