class Solution {
private:
    pair<bool,int> solve(TreeNode* root){
        // Base case
        if(root == NULL){
            pair<bool,int> p = {true,0};
            return p;
        }
        
        // checking left subtree
        pair<bool,int> ls = solve(root->left);
        
        // checking right subtree
        pair<bool,int> rs = solve(root->right);
    
        pair<bool,int> ans;
        
        // if tree is balanced or not
        int flag = abs(ls.second - rs.second) <= 1;
        
        ans.second = 1 + max(ls.second,rs.second);
        if(flag and ls.first and rs.first){
            ans.first = true;
        }
        else{
            ans.second = false;
        }
        
        return ans;
    }
public:
    bool isBalanced(TreeNode* root) {
        return solve(root).first;
    }
};
