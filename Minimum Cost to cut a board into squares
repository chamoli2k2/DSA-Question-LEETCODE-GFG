class Solution {
public:
    int minimumCostOfBreaking(vector<int> X, vector<int> Y, int M, int N){
        int colCut = 1;
        int rowCut = 1;
        
        // Sorting both the array
        sort(X.rbegin(),X.rend()); 
        sort(Y.rbegin(),Y.rend()); 
        
        int i = 0;
        int j = 0;
        int ans = 0;
        
        while(i < M-1 && j < N-1){
            if(X[i] > Y[j]){
                ans = ans + X[i] * rowCut;
                colCut++;
                i++;
            }
            else{
                ans = ans + Y[j] * colCut;
                rowCut++;
                j++;
            }
        }
        
        // making remaining pieces 
        while(i < M-1){
            ans = ans + X[i] * rowCut;
            i++;
        }
        
        while(j < N-1){
            ans = ans + Y[j] * colCut;
            j++;
        }
        
        return ans;
    }
};
