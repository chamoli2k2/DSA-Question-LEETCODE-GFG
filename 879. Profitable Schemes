class Solution {
private:
    int solve(int idx,int n,int target){
        // Base case
        if(idx >= size(nums)){
            return (n >= 0 && target <= 0);
        }

        if(target < 0) target = 0;
        if(dp[idx][n][target] != -1) return dp[idx][n][target];

        // We have two options
        int take = 0;
        if(nums[idx].first <= n){
            take = solve(idx+1,n-nums[idx].first,target-nums[idx].second);
        }

        int noTake = solve(idx+1,n,target);

        return dp[idx][n][target] = (take%mod + noTake%mod) % mod;
    }
public:
    int mod = 1e9 + 7;
    int dp[102][102][102];
    vector<pair<int,int>> nums;
    int profitableSchemes(int n, int minProfit, vector<int>& group, vector<int>& profit) {
        for(int i=0;i<size(group);i++){
            nums.push_back({group[i],profit[i]});
        }
        memset(dp,-1,sizeof(dp));
        return solve(0,n,minProfit);
    }
};
