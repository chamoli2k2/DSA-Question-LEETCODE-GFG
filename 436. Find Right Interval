class Solution {
public:
    vector<int> findRightInterval(vector<vector<int>>& intervals) {
        vector<int> ans;
        vector<int> st;
        unordered_map<int,int> mp;

        // Marking the starting with index
        for(int i=0;i<intervals.size();i++){
            mp[intervals[i][0]] = i;
            st.push_back(intervals[i][0]);
        }
        // Sorting the array
        sort(st.begin(),st.end());

        for(int i=0;i<intervals.size();i++){
            int end = intervals[i][1];

            auto lb = lower_bound(st.begin(),st.end(),end);
            // Checking if we found lb of function
            if(lb == st.end()){
                ans.push_back(-1);
            }
            else{
                int k = lb - st.begin();
                int start = st[k];
                ans.push_back(mp[start]);
            }
        }

        return ans;
    }
};
