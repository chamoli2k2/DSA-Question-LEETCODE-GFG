class Solution {
public:
    vector<int> distanceK(TreeNode* root, TreeNode* target, int k) {
        unordered_map<TreeNode*, vector<TreeNode*>> mp;
        queue<TreeNode*> q;
        q.push(root);

        while(!q.empty()){
            int n = q.size();

            for(int i=0; i<n; i++){
                TreeNode* tempNode = q.front();
                q.pop();

                if(tempNode->left){
                    mp[tempNode].push_back(tempNode->left);
                    mp[tempNode->left].push_back(tempNode);
                    q.push(tempNode->left);
                }

                if(tempNode->right){
                    mp[tempNode].push_back(tempNode->right);
                    mp[tempNode->right].push_back(tempNode);
                    q.push(tempNode->right);
                }
            }
        }

        queue<pair<TreeNode*, int>> pq;
        unordered_map<TreeNode*, bool> visited;
        pq.push({target, 0});
        vector<int> ans;
        visited[target] = true;


        while(!pq.empty()){
            TreeNode* node = pq.front().first;
            int t = pq.front().second;
            pq.pop();

            if(t == k){
                ans.push_back(node->val);
                continue;
            }

            for(auto &it : mp[node]){
                if(visited[it] == false){
                    pq.push({it, t+1});
                    visited[it] = true;
                }
            }
        }

        return ans;
    }
};