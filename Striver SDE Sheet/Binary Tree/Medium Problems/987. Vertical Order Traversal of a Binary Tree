/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<vector<int>> verticalTraversal(TreeNode* root) {
        vector<vector<int>> ans;
        queue<pair<TreeNode*, int>> q;
        q.push({root, 0});
        map<int, vector<int>> mp;

        while(!q.empty()){
            int n = q.size();
            set<int> level;
            unordered_map<int, multiset<int>> st;

            for(int i=0; i<n; i++){
                TreeNode* tempNode = q.front().first;
                int lvl = q.front().second;
                q.pop();

                st[lvl].insert(tempNode->val);
                level.insert(lvl);

                if(tempNode->left) q.push({tempNode->left, lvl-1});
                if(tempNode->right) q.push({tempNode->right, lvl+1});
            }

            for(auto &it : level){
                for(auto &node : st[it]){
                    mp[it].push_back(node);
                }
            }
        }

        for(auto &it : mp){
            ans.push_back(it.second);
        }

        return ans;
    }
};