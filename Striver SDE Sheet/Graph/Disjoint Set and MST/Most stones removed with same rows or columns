class DisJointSet{
public:
    vector<int> size, parent;
    // Constructor
    DisJointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    // Finding ulimate parent of node
    int findUPar(int node){
        // Finding Parent
        if(node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};
class Solution {
public:
    int removeStones(vector<vector<int>>& stones) {
        int maxRow = 0, maxCol = 0, n = stones.size();
        for(auto &it : stones){
            maxRow = max(maxRow, it[0]);
            maxCol = max(maxCol, it[1]);
        }

        DisJointSet ds(maxRow+maxCol+1);

        for(auto &it : stones){
            int x = it[0], y = it[1];

            // Converting row and col into nodes
            int row = x, col = maxRow + y + 1;
            if(ds.findUPar(row) != ds.findUPar(col)){
                ds.unionBySize(row, col);
            }
        }

        int count = 0;
        for(int i=0; i<maxRow+maxCol+1; i++){
            if(ds.findUPar(i) == i && ds.size[i] > 1){
                count++;
            }
        }

        return n - count;
    }
};