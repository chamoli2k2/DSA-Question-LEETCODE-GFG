class DisJointSet{
public:
    vector<int> size, parent;
    // Constructor
    DisJointSet(int n){
        size.resize(n+1,1);
        parent.resize(n+1);
        for(int i=0;i<=n;i++){
            parent[i] = i;
        }
    }

    // Finding ulimate parent of node
    int findUPar(int node){
        // Finding Parent
        if(node == parent[node]) return node;

        // Path compression
        return parent[node] = findUPar(parent[node]);
    }

    // Union by size 
    void unionBySize(int u,int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v) return;
        if(size[ulp_u] < size[ulp_v]){
            parent[ulp_u] = ulp_v;
            size[ulp_v] += size[ulp_u];
        }
        else{
            parent[ulp_v] = ulp_u;
            size[ulp_u] += size[ulp_v];
        }
    }
};

class Solution {
public:
    int largestIsland(vector<vector<int>>& grid) {
        int n = grid.size();
        DisJointSet ds(n*n);

        int dc[] = {-1, 1, 0, 0};
        int dr[] = {0, 0, 1, -1};

        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 0) continue;

                for(int k=0; k<4; k++){
                    int row = i + dr[k];
                    int col = j + dc[k];

                    if(row >= 0 && row < n && col >= 0 && col < n && grid[row][col] == 1){
                        int node = i * n + j;
                        int adjNode = row * n + col;

                        if(ds.findUPar(node) != ds.findUPar(adjNode)){
                            ds.unionBySize(node, adjNode);
                        }
                    }
                }
            }
        }

        int ans = -1;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(grid[i][j] == 1) continue;
                set<int> st;

                for(int k=0; k<4; k++){
                    int row = i + dr[k];
                    int col = j + dc[k];

                    if(row >= 0 && row < n && col >= 0 && col < n && grid[row][col] == 1){
                        int adjNode = row * n + col;
                        st.insert(ds.findUPar(adjNode));
                    }
                }

                int currAns = 0;
                for(auto &it : st){
                    currAns += ds.size[it];
                }

                ans = max(ans, currAns+1);
            }
        }

        return ans == -1 ? n*n : ans;
    }
};