class Solution {
  public:
    vector<int> shortestPath(vector<vector<int>>& edges, int N,int M, int src){
        vector<int> ans(N, 1e8);
        vector<int> adjList[N];
        
        for(int i=0; i<M; i++){
            adjList[edges[i][0]].push_back(edges[i][1]);
            adjList[edges[i][1]].push_back(edges[i][0]);
        }
        
        
        queue<pair<int,int>> q;
        q.push({src, 0});
        ans[src] = 0;
        
        while(!q.empty()){
            int node = q.front().first;
            int dist = q.front().second;
            q.pop();
            
            for(auto &it : adjList[node]){
                if(ans[it] > dist+1){
                    ans[it] = dist+1;
                    q.push({it, dist+1});
                }
            }
        }
        
        for(int i=0; i<N; i++) ans[i] = ans[i] == 1e8 ? -1 : ans[i];
        
        return ans;
    }
};