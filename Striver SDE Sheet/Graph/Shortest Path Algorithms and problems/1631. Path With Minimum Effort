class Solution {
public:
    int minimumEffortPath(vector<vector<int>>& heights) {
        int n = heights.size(), m = heights[0].size();
        vector<vector<int>> effortMatrix(n, vector<int>(m, 1e8));
        priority_queue<pair<int, pair<int,int>>, vector<pair<int, pair<int,int>>>, greater<pair<int, pair<int,int>>>> pq;
        pq.push({0, {0, 0}});
        effortMatrix[0][0] = 0;



        int dc[] = {-1, 1, 0, 0};
        int dr[] = {0, 0, 1, -1};
        while(!pq.empty()){
            int maxEffort = pq.top().first;
            int i = pq.top().second.first;
            int j = pq.top().second.second;
            pq.pop();


            if(i == n-1 && j == m-1){
                return maxEffort;
            }

            for(int k=0; k<4; k++){
                int row = i + dr[k];
                int col = j + dc[k];

                if(row >= 0 && row < n && col >= 0 && col < m){
                    int newEffort = abs(heights[i][j]-heights[row][col]);
                    int currEffort = max(newEffort, maxEffort);

                    if(effortMatrix[row][col] > currEffort){
                        effortMatrix[row][col] = currEffort;
                        pq.push({currEffort, {row, col}});
                    }
                }
            }
        }

        return -1;
    }
};