class Solution {
public:
    int ladderLength(string beginWord, string endWord, vector<string>& wordList) {
        queue<pair<string,int>> q;
        unordered_map<string, bool> mp, visited;
        for(auto &it : wordList) mp[it] = true;

        q.push({beginWord, 1});

        while(!q.empty()){
            string word = q.front().first;
            int dist = q.front().second;
            q.pop();

            if(word == endWord){
                return dist;
            }

            for(int i=0; i<word.size(); i++){
                char oldChar = word[i];
                for(char ch='a'; ch<='z'; ch++){
                    if(ch == oldChar) continue;

                    word[i] = ch;

                    if(mp.count(word) && visited[word] == false){
                        visited[word] = true;
                        q.push({word, dist+1});
                    }
                }

                word[i] = oldChar;
            }
        }

        return 0;
    }
};