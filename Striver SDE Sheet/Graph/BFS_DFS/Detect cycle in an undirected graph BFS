class Solution {
    private:
    bool bfs(vector<int> adj[], vector<int> &visited, int src){
        queue<pair<int,int>> q;
        q.push({src, -1});
        visited[src] = 1;
        
        while(!q.empty()){
            int node = q.front().first;
            int parent = q.front().second;
            q.pop();
            
            for(auto &it : adj[node]){
                if(visited[it] == false){
                    q.push({it, node});
                    visited[it] = true;
                }
                else if(it != parent){
                    return true;
                }
            }
        }
        
        return false;
    }
  public:
    // Function to detect cycle in an undirected graph.
    bool isCycle(int V, vector<int> adj[]) {
        vector<int> visited(V, 0);
        
        for(int i=0; i<V; i++){
            if(visited[i] == 0){
                if(bfs(adj, visited, i)) return true;
            }
        }
        
        return false;
    }
};