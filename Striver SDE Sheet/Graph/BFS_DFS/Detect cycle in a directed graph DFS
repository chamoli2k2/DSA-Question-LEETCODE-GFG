class Solution {
    private:
    bool dfs(vector<int> adj[], vector<int> &visited, vector<int> &dfsVisited, int node){
        visited[node] = 1;
        dfsVisited[node] = 1;
        
        for(auto &it : adj[node]){
            if(visited[it] == 0){
                if(dfs(adj, visited, dfsVisited, it)) return true;
            }
            else if(dfsVisited[it]){
                return true;
            }
        }
        
        dfsVisited[node] = 0;
        return false;
    }
  public:
    // Function to detect cycle in a directed graph.
    bool isCyclic(int V, vector<int> adj[]) {
        vector<int> visited(V, 0), dfsVisited(V, 0);
        
        for(int i=0; i<V; i++){
            if(visited[i] == 0){
                if(dfs(adj, visited, dfsVisited, i)) return true;
            }
        }
        
        return false;
    }
};