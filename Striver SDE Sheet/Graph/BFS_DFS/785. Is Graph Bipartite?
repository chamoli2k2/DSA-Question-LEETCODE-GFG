class Solution {
private:
    bool dfs(vector<vector<int>> &adjList, vector<int> &visited, int node, int color){
        visited[node] = color;

        for(auto &it : adjList[node]){
            if(visited[it] == 0){
                int newColor = (color == 1) ? 2 : 1;
                if(dfs(adjList, visited, it, newColor)){
                    return true;
                }
            }
            else if(visited[it] == color){
                return true;
            }
        }

        return false;
    }
public:
    bool isBipartite(vector<vector<int>>& graph) {
        int V = graph.size();
        vector<int> visited(V, 0);

        for(int i=0; i<V; i++){
            if(visited[i] == 0){
                if(dfs(graph, visited, i, 1)) return false;
            }
        }

        return true;
    }
};