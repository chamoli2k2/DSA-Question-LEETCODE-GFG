class Solution
{
    private:
    void dfs(vector<int> adj[], vector<int> &visited, stack<int> &st, int node){
        visited[node] = 1;
        
        for(auto &it : adj[node]){
            if(visited[it] == 0){
                dfs(adj, visited, st, it);
            }
        }
        
        st.push(node);
    }
	public:
	//Function to return list containing vertices in Topological order. 
	vector<int> topoSort(int V, vector<int> adj[]) 
	{
	    stack<int> st;
	    vector<int> visited(V, 0), ans;
	    for(int i=0; i<V; i++){
	        if(visited[i] == 0){
	            dfs(adj, visited, st, i);
	        }
	    }
	    
	    while(!st.empty()){
	        int node = st.top();
	        st.pop();
	        ans.push_back(node);
	    }
	    
	    return ans;
	}
};