class Solution {
private:
    int solve(vector<int> &nums,int i,int j,int x){
        // Base case
        if(i > j) return 0;

        if(dp[i][j] != -1) return dp[i][j];

        int ans = INT_MAX;
        for(int k=i+1;k<=j;k+=2){
            int c = solve(nums,i+1,k-1,x) + solve(nums,k+1,j,x);
            ans = min({ans,x+c,nums[k]-nums[i]+c});
        }

        return dp[i][j] = ans;
    }
public:
    int dp[501][501];
    int minOperations(string s1, string s2, int x) {
        int n = s1.size();
        vector<int> num;
        // Finding the position where s1 and s2 differ
        for(int i=0;i<n;i++){
            if(s1[i] != s2[i]) num.push_back(i);
        }

        // Base case
        if(num.size() & 1) return -1;
        memset(dp,-1,sizeof(dp));
        return solve(num,0,num.size()-1,x);
    }
};
